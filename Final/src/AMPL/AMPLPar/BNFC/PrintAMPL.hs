{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintAMPL where

-- pretty-printer generated by the BNF converter

import AbsAMPL
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Store where
  prt _ (Store (_,i)) = doc (showString ( i))


instance Print Load where
  prt _ (Load (_,i)) = doc (showString ( i))


instance Print Ret where
  prt _ (Ret (_,i)) = doc (showString ( i))


instance Print Call where
  prt _ (Call (_,i)) = doc (showString ( i))


instance Print ConstInt where
  prt _ (ConstInt (_,i)) = doc (showString ( i))


instance Print ConstChar where
  prt _ (ConstChar (_,i)) = doc (showString ( i))


instance Print ConstString where
  prt _ (ConstString (_,i)) = doc (showString ( i))


instance Print ToStr where
  prt _ (ToStr (_,i)) = doc (showString ( i))


instance Print ToInt where
  prt _ (ToInt (_,i)) = doc (showString ( i))


instance Print And where
  prt _ (And (_,i)) = doc (showString ( i))


instance Print Or where
  prt _ (Or (_,i)) = doc (showString ( i))


instance Print Append where
  prt _ (Append (_,i)) = doc (showString ( i))


instance Print Unstring where
  prt _ (Unstring (_,i)) = doc (showString ( i))


instance Print LeqI where
  prt _ (LeqI (_,i)) = doc (showString ( i))


instance Print EqI where
  prt _ (EqI (_,i)) = doc (showString ( i))


instance Print Leqc where
  prt _ (Leqc (_,i)) = doc (showString ( i))


instance Print Eqc where
  prt _ (Eqc (_,i)) = doc (showString ( i))


instance Print Leqs where
  prt _ (Leqs (_,i)) = doc (showString ( i))


instance Print Eqs where
  prt _ (Eqs (_,i)) = doc (showString ( i))


instance Print ConcatS where
  prt _ (ConcatS (_,i)) = doc (showString ( i))


instance Print Add where
  prt _ (Add (_,i)) = doc (showString ( i))


instance Print Subtract where
  prt _ (Subtract (_,i)) = doc (showString ( i))


instance Print Mul where
  prt _ (Mul (_,i)) = doc (showString ( i))


instance Print Quot where
  prt _ (Quot (_,i)) = doc (showString ( i))


instance Print Rem where
  prt _ (Rem (_,i)) = doc (showString ( i))


instance Print Cons where
  prt _ (Cons (_,i)) = doc (showString ( i))


instance Print Case where
  prt _ (Case (_,i)) = doc (showString ( i))


instance Print Rec where
  prt _ (Rec (_,i)) = doc (showString ( i))


instance Print Get where
  prt _ (Get (_,i)) = doc (showString ( i))


instance Print Put where
  prt _ (Put (_,i)) = doc (showString ( i))


instance Print Hput where
  prt _ (Hput (_,i)) = doc (showString ( i))


instance Print Hcase where
  prt _ (Hcase (_,i)) = doc (showString ( i))


instance Print Split where
  prt _ (Split (_,i)) = doc (showString ( i))


instance Print Fork where
  prt _ (Fork (_,i)) = doc (showString ( i))


instance Print Plug where
  prt _ (Plug (_,i)) = doc (showString ( i))


instance Print Run where
  prt _ (Run (_,i)) = doc (showString ( i))


instance Print Close where
  prt _ (Close (_,i)) = doc (showString ( i))


instance Print Halt where
  prt _ (Halt (_,i)) = doc (showString ( i))


instance Print Ch_Id where
  prt _ (Ch_Id (_,i)) = doc (showString ( i))


instance Print Main_run where
  prt _ (Main_run (_,i)) = doc (showString ( i))


instance Print Character where
  prt _ (Character (_,i)) = doc (showString ( i))


instance Print UIdent where
  prt _ (UIdent (_,i)) = doc (showString ( i))


instance Print PIdent where
  prt _ (PIdent (_,i)) = doc (showString ( i))
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

instance Print PInteger where
  prt _ (PInteger (_,i)) = doc (showString ( i))



instance Print AMPLCODE where
  prt i e = case e of
    Main amplconstructss start -> prPrec i 0 (concatD [prt 0 amplconstructss, prt 0 start])

instance Print AMPL_CONSTRUCTS where
  prt i e = case e of
    IMPORT_CONSTRUCT import_ -> prPrec i 0 (concatD [prt 0 import_])
    HANDLE_CONSTRUCT handles -> prPrec i 0 (concatD [prt 0 handles])
    COHANDLE_CONSTRUCT cohandles -> prPrec i 0 (concatD [prt 0 cohandles])
    CONSTRUCTOR_CONSTRUCT constructors -> prPrec i 0 (concatD [prt 0 constructors])
    DESTRUCTOR_CONSTRUCT destructors -> prPrec i 0 (concatD [prt 0 destructors])
    PROCESSES_CONSTRUCT processes -> prPrec i 0 (concatD [prt 0 processes])
    FUNCTIONS_CONSTRUCT functions -> prPrec i 0 (concatD [prt 0 functions])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print HANDLE_SPEC where
  prt i e = case e of
    Hand_spec uident handles -> prPrec i 0 (concatD [prt 0 uident, doc (showString "="), doc (showString "{"), prt 0 handles, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Handle where
  prt i e = case e of
    HandName uident -> prPrec i 0 (concatD [prt 0 uident])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print IMPORTS where
  prt i e = case e of
    Imports imports -> prPrec i 0 (concatD [prt 0 imports])

instance Print LUIDENT where
  prt i e = case e of
    LIDENT pident -> prPrec i 0 (concatD [prt 0 pident])
    UIDENT uident -> prPrec i 0 (concatD [prt 0 uident])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "/"), prt 0 xs])
instance Print DirPath where
  prt i e = case e of
    DIRPATH luidents -> prPrec i 0 (concatD [prt 0 luidents])

instance Print Slash where
  prt i e = case e of
    SLASH -> prPrec i 0 (concatD [doc (showString "/")])
    SLASH_NONE -> prPrec i 0 (concatD [])

instance Print IMPORT where
  prt i e = case e of
    Import slash dirpath -> prPrec i 0 (concatD [doc (showString "%include"), prt 0 slash, prt 0 dirpath, doc (showString ".ampl")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print CONSTRUCTORS where
  prt i e = case e of
    Constructors structorspecs -> prPrec i 0 (concatD [doc (showString "%constructors"), doc (showString ":"), doc (showString "{"), prt 0 structorspecs, doc (showString "}")])

instance Print DESTRUCTORS where
  prt i e = case e of
    Destructors structorspecs -> prPrec i 0 (concatD [doc (showString "%destructors"), doc (showString ":"), doc (showString "{"), prt 0 structorspecs, doc (showString "}")])

instance Print STRUCTOR_SPEC where
  prt i e = case e of
    Struct_spec uident structs -> prPrec i 0 (concatD [prt 0 uident, doc (showString "="), doc (showString "{"), prt 0 structs, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print STRUCT where
  prt i e = case e of
    Struct uident pinteger -> prPrec i 0 (concatD [prt 0 uident, prt 0 pinteger])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print HANDLES where
  prt i e = case e of
    Handles handlespecs -> prPrec i 0 (concatD [doc (showString "%handles"), doc (showString ":"), doc (showString "{"), prt 0 handlespecs, doc (showString "}")])

instance Print COHANDLES where
  prt i e = case e of
    Cohandles handlespecs -> prPrec i 0 (concatD [doc (showString "%cohandles"), doc (showString ":"), doc (showString "{"), prt 0 handlespecs, doc (showString "}")])

instance Print PROCESSES where
  prt i e = case e of
    Processes processspecs -> prPrec i 0 (concatD [doc (showString "%processes"), doc (showString ":"), doc (showString "{"), prt 0 processspecs, doc (showString "}")])

instance Print PROCESS_SPEC where
  prt i e = case e of
    Process_spec pident varss pidents1 pidents2 coms -> prPrec i 0 (concatD [prt 0 pident, doc (showString "("), prt 0 varss, doc (showString "|"), prt 0 pidents1, doc (showString "=>"), prt 0 pidents2, doc (showString ")"), doc (showString "="), prt 0 coms])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Vars where
  prt i e = case e of
    VName pident -> prPrec i 0 (concatD [prt 0 pident])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print FUNCTIONS where
  prt i e = case e of
    Functions functionspecs -> prPrec i 0 (concatD [doc (showString "%functions"), doc (showString ":"), doc (showString "{"), prt 0 functionspecs, doc (showString "}")])

instance Print FUNCTION_SPEC where
  prt i e = case e of
    Function_spec pident varss coms -> prPrec i 0 (concatD [prt 0 pident, doc (showString "("), prt 0 varss, doc (showString ")"), doc (showString "="), prt 0 coms])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print START where
  prt i e = case e of
    Start mainrun channelspec coms -> prPrec i 0 (concatD [prt 0 mainrun, prt 0 channelspec, doc (showString ":"), prt 0 coms])
    Start_none -> prPrec i 0 (concatD [])

instance Print CHANNEL_SPEC where
  prt i e = case e of
    Channel_specf pidents1 pidents2 -> prPrec i 0 (concatD [doc (showString "("), doc (showString "|"), prt 0 pidents1, doc (showString "=>"), prt 0 pidents2, doc (showString ")")])
    Channel_spec cintegers1 cintegers2 -> prPrec i 0 (concatD [doc (showString "("), prt 0 cintegers1, doc (showString "=>"), prt 0 cintegers2, doc (showString ")")])

instance Print COMS where
  prt i e = case e of
    Prog coms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 coms, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print COM where
  prt i e = case e of
    AC_ASSIGN pident com -> prPrec i 0 (concatD [prt 0 pident, doc (showString ":="), prt 0 com])
    AC_STOREf store pident -> prPrec i 0 (concatD [prt 0 store, prt 0 pident])
    AC_LOADf load pident -> prPrec i 0 (concatD [prt 0 load, prt 0 pident])
    AC_RET ret -> prPrec i 0 (concatD [prt 0 ret])
    AC_CALLf call pident pidents -> prPrec i 0 (concatD [prt 0 call, prt 0 pident, doc (showString "("), prt 0 pidents, doc (showString ")")])
    AC_INT constint cinteger -> prPrec i 0 (concatD [prt 0 constint, prt 0 cinteger])
    AC_CHAR constchar character -> prPrec i 0 (concatD [prt 0 constchar, prt 0 character])
    AC_STRING conststring str -> prPrec i 0 (concatD [prt 0 conststring, prt 0 str])
    AC_TOSTR tostr -> prPrec i 0 (concatD [prt 0 tostr])
    AC_TOINT toint -> prPrec i 0 (concatD [prt 0 toint])
    AC_AND and -> prPrec i 0 (concatD [prt 0 and])
    AC_OR or -> prPrec i 0 (concatD [prt 0 or])
    AC_APPEND append -> prPrec i 0 (concatD [prt 0 append])
    AC_UNSTRING unstring -> prPrec i 0 (concatD [prt 0 unstring])
    AC_LEQ leqi -> prPrec i 0 (concatD [prt 0 leqi])
    AC_EQ eqi -> prPrec i 0 (concatD [prt 0 eqi])
    AC_LEQC leqc -> prPrec i 0 (concatD [prt 0 leqc])
    AC_EQC eqc -> prPrec i 0 (concatD [prt 0 eqc])
    AC_LEQS leqs -> prPrec i 0 (concatD [prt 0 leqs])
    AC_EQS eqs -> prPrec i 0 (concatD [prt 0 eqs])
    AC_CONCAT concats n -> prPrec i 0 (concatD [prt 0 concats, prt 0 n])
    AC_ADD add -> prPrec i 0 (concatD [prt 0 add])
    AC_SUB subtract -> prPrec i 0 (concatD [prt 0 subtract])
    AC_MUL mul -> prPrec i 0 (concatD [prt 0 mul])
    AC_DIVQ quot -> prPrec i 0 (concatD [prt 0 quot])
    AC_DIVR rem -> prPrec i 0 (concatD [prt 0 rem])
    AC_CONS cons pinteger1 pinteger2 -> prPrec i 0 (concatD [prt 0 cons, doc (showString "("), prt 0 pinteger1, doc (showString ","), prt 0 pinteger2, doc (showString ")")])
    AC_STRUCT uident1 uident2 -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2])
    AC_STRUCTas uident1 uident2 pidents -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2, doc (showString "("), prt 0 pidents, doc (showString ")")])
    AC_CASEf case_ labelcomss -> prPrec i 0 (concatD [prt 0 case_, doc (showString "of"), doc (showString "{"), prt 0 labelcomss, doc (showString "}")])
    AC_RECORDf rec labelcomss -> prPrec i 0 (concatD [prt 0 rec, doc (showString "of"), doc (showString "{"), prt 0 labelcomss, doc (showString "}")])
    AC_DESTl uident1 uident2 pident -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2, prt 0 pident])
    AC_DESTlas uident1 uident2 pidents pident -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2, doc (showString "("), prt 0 pidents, doc (showString ")"), prt 0 pident])
    AC_GETf get pident1 pident2 -> prPrec i 0 (concatD [prt 0 get, prt 0 pident1, doc (showString "on"), prt 0 pident2])
    AC_HPUTf hput pident uident1 uident2 -> prPrec i 0 (concatD [prt 0 hput, prt 0 pident, prt 0 uident1, doc (showString "."), prt 0 uident2])
    AC_HCASEf hcase pident labelcomss -> prPrec i 0 (concatD [prt 0 hcase, prt 0 pident, doc (showString "of"), doc (showString "{"), prt 0 labelcomss, doc (showString "}")])
    AC_PUTf put pident -> prPrec i 0 (concatD [prt 0 put, prt 0 pident])
    AC_SPLITf split pident1 pident2 pident3 -> prPrec i 0 (concatD [prt 0 split, prt 0 pident1, doc (showString "into"), prt 0 pident2, prt 0 pident3])
    AC_FORKf fork pident1 pident2 pidents1 coms1 pident3 pidents2 coms2 -> prPrec i 0 (concatD [prt 0 fork, prt 0 pident1, doc (showString "as"), doc (showString "{"), prt 0 pident2, doc (showString "with"), prt 0 pidents1, doc (showString ":"), prt 0 coms1, doc (showString ";"), prt 0 pident3, doc (showString "with"), prt 0 pidents2, doc (showString ":"), prt 0 coms2, doc (showString "}")])
    AC_PLUGf plug pidents1 pidents2 coms1 pidents3 coms2 -> prPrec i 0 (concatD [prt 0 plug, prt 0 pidents1, doc (showString "as"), doc (showString "{"), doc (showString "with"), doc (showString "["), prt 0 pidents2, doc (showString "]"), doc (showString ":"), prt 0 coms1, doc (showString ";"), doc (showString "with"), doc (showString "["), prt 0 pidents3, doc (showString "]"), doc (showString ":"), prt 0 coms2, doc (showString "}")])
    AC_RUNf run pident pidents1 pidents2 pidents3 -> prPrec i 0 (concatD [prt 0 run, prt 0 pident, doc (showString "("), prt 0 pidents1, doc (showString "|"), prt 0 pidents2, doc (showString "=>"), prt 0 pidents3, doc (showString ")")])
    AC_IDF pident1 chid pident2 -> prPrec i 0 (concatD [prt 0 pident1, prt 0 chid, prt 0 pident2])
    AC_PROD pidents -> prPrec i 0 (concatD [doc (showString "("), prt 0 pidents, doc (showString ")")])
    AC_PRODELEM cinteger pident -> prPrec i 0 (concatD [doc (showString "#"), prt 0 cinteger, doc (showString "("), prt 0 pident, doc (showString ")")])
    AC_EMSG str -> prPrec i 0 (concatD [prt 0 str])
    AC_CLOSEf close pident -> prPrec i 0 (concatD [prt 0 close, prt 0 pident])
    AC_HALTf halt pidents -> prPrec i 0 (concatD [prt 0 halt, prt 0 pidents])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print LABELCOMS where
  prt i e = case e of
    Labelcoms1 uident1 uident2 coms -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2, doc (showString ":"), prt 0 coms])
    Labelcoms2 uident1 uident2 pidents coms -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "."), prt 0 uident2, doc (showString "("), prt 0 pidents, doc (showString ")"), doc (showString ":"), prt 0 coms])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print CInteger where
  prt i e = case e of
    Positive pinteger -> prPrec i 0 (concatD [prt 0 pinteger])
    Negative pinteger -> prPrec i 0 (concatD [doc (showString "-"), prt 0 pinteger])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

