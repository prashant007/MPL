The Language AMPL
BNF Converter


%This txt2tags file is machine-generated by the BNF-converter
%Process by txt2tags to generate html or latex



This document was automatically generated by the //BNF-Converter//. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).

==The lexical structure of AMPL==

===Literals===
String literals //String// have the form
``"``//x//``"``}, where //x// is any sequence of any characters
except ``"`` unless preceded by ``\``.


Integer literals //Integer// are nonempty sequences of digits.















































Store literals are recognized by the regular expression
`````{"store"}`````

Load literals are recognized by the regular expression
`````{"load"}`````

Ret literals are recognized by the regular expression
`````{"ret"}`````

Call literals are recognized by the regular expression
`````{"call"}`````

ConstInt literals are recognized by the regular expression
`````{"cInt"}`````

ConstChar literals are recognized by the regular expression
`````{"cChar"}`````

ConstString literals are recognized by the regular expression
`````{"cString"}`````

ToStr literals are recognized by the regular expression
`````{"toStr"}`````

ToInt literals are recognized by the regular expression
`````{"toInt"}`````

And literals are recognized by the regular expression
`````{"And"}`````

Or literals are recognized by the regular expression
`````{"or"}`````

Append literals are recognized by the regular expression
`````{"appendL"}`````

Unstring literals are recognized by the regular expression
`````{"unstring"}`````

LeqI literals are recognized by the regular expression
`````{"leq"}`````

EqI literals are recognized by the regular expression
`````{"eq"}`````

Leqc literals are recognized by the regular expression
`````{"leqc"}`````

Eqc literals are recognized by the regular expression
`````{"eqc"}`````

Leqs literals are recognized by the regular expression
`````{"leqs"}`````

Eqs literals are recognized by the regular expression
`````{"eqs"}`````

ConcatS literals are recognized by the regular expression
`````{"concatS"}`````

Add literals are recognized by the regular expression
`````{"add"}`````

Subtract literals are recognized by the regular expression
`````{"subtract"}`````

Mul literals are recognized by the regular expression
`````{"mul"}`````

Quot literals are recognized by the regular expression
`````{"quot"}`````

Rem literals are recognized by the regular expression
`````{"rem"}`````

Cons literals are recognized by the regular expression
`````{"cons"}`````

Case literals are recognized by the regular expression
`````{"case"}`````

Rec literals are recognized by the regular expression
`````{"rec"}`````

Get literals are recognized by the regular expression
`````{"get"}`````

Put literals are recognized by the regular expression
`````{"put"}`````

Hput literals are recognized by the regular expression
`````{"hput"}`````

Hcase literals are recognized by the regular expression
`````{"hcase"}`````

Split literals are recognized by the regular expression
`````{"split"}`````

Fork literals are recognized by the regular expression
`````{"fork"}`````

Plug literals are recognized by the regular expression
`````{"plug"}`````

Run literals are recognized by the regular expression
`````{"run"}`````

Close literals are recognized by the regular expression
`````{"close"}`````

Halt literals are recognized by the regular expression
`````{"halt"}`````

Ch_Id literals are recognized by the regular expression
`````{"=="}`````

Main_run literals are recognized by the regular expression
`````{"%run"}`````

Character literals are recognized by the regular expression
`````''' (char - ["'\"] | '\' ["'\nt"]) '''`````

UIdent literals are recognized by the regular expression
`````upper (letter | digit | '_')*`````

PIdent literals are recognized by the regular expression
`````letter (letter | digit | '_' | ''')*`````

PInteger literals are recognized by the regular expression
`````digit+`````


===Reserved words and symbols===
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.

The reserved words used in AMPL are the following:
  | ``as`` | ``into`` | ``of`` | ``on``
  | ``with`` |  |  | 

The symbols used in AMPL are the following:
  | = | { | } | ;
  | / | %include | .ampl | %constructors
  | : | %destructors | %handles | %cohandles
  | %processes | ( | | | =>
  | ) | , | %functions | :=
  | . | [ | ] | #
  | - |  |  | 

===Comments===
Single-line comments begin with --.Multiple-line comments are  enclosed with /* and */.

==The syntactic structure of AMPL==
Non-terminals are enclosed between < and >. 
The symbols -> (production),  **|**  (union) 
and **eps** (empty rule) belong to the BNF notation. 
All other symbols are terminals.

  | //AMPLCODE// | -> | //[AMPL_CONSTRUCTS]// //START// 
  | //AMPL_CONSTRUCTS// | -> | //IMPORT// 
  |  |  **|**  | //HANDLES// 
  |  |  **|**  | //COHANDLES// 
  |  |  **|**  | //CONSTRUCTORS// 
  |  |  **|**  | //DESTRUCTORS// 
  |  |  **|**  | //PROCESSES// 
  |  |  **|**  | //FUNCTIONS// 
  | //[AMPL_CONSTRUCTS]// | -> | **eps**
  |  |  **|**  | //AMPL_CONSTRUCTS// //[AMPL_CONSTRUCTS]// 
  | //HANDLE_SPEC// | -> | //UIdent// ``=`` ``{`` //[Handle]// ``}`` 
  | //Handle// | -> | //UIdent// 
  | //[HANDLE_SPEC]// | -> | **eps**
  |  |  **|**  | //HANDLE_SPEC// 
  |  |  **|**  | //HANDLE_SPEC// ``;`` //[HANDLE_SPEC]// 
  | //[Handle]// | -> | //Handle// 
  |  |  **|**  | //Handle// ``;`` //[Handle]// 
  | //IMPORTS// | -> | //[IMPORT]// 
  | //LUIDENT// | -> | //PIdent// 
  |  |  **|**  | //UIdent// 
  | //DirPath// | -> | //[LUIDENT]// 
  | //[LUIDENT]// | -> | //LUIDENT// 
  |  |  **|**  | //LUIDENT// ``/`` //[LUIDENT]// 
  | //Slash// | -> | ``/`` 
  |  |  **|**  | **eps**
  | //[IMPORT]// | -> | **eps**
  |  |  **|**  | //IMPORT// //[IMPORT]// 
  | //IMPORT// | -> | ``%include`` //Slash// //DirPath// ``.ampl`` 
  | //CONSTRUCTORS// | -> | ``%constructors`` ``:`` ``{`` //[STRUCTOR_SPEC]// ``}`` 
  | //DESTRUCTORS// | -> | ``%destructors`` ``:`` ``{`` //[STRUCTOR_SPEC]// ``}`` 
  | //STRUCTOR_SPEC// | -> | //UIdent// ``=`` ``{`` //[STRUCT]// ``}`` 
  | //STRUCT// | -> | //UIdent// //PInteger// 
  | //[STRUCTOR_SPEC]// | -> | **eps**
  |  |  **|**  | //STRUCTOR_SPEC// 
  |  |  **|**  | //STRUCTOR_SPEC// ``;`` //[STRUCTOR_SPEC]// 
  | //[STRUCT]// | -> | //STRUCT// 
  |  |  **|**  | //STRUCT// ``;`` //[STRUCT]// 
  | //HANDLES// | -> | ``%handles`` ``:`` ``{`` //[HANDLE_SPEC]// ``}`` 
  | //COHANDLES// | -> | ``%cohandles`` ``:`` ``{`` //[HANDLE_SPEC]// ``}`` 
  | //PROCESSES// | -> | ``%processes`` ``:`` ``{`` //[PROCESS_SPEC]// ``}`` 
  | //[PROCESS_SPEC]// | -> | **eps**
  |  |  **|**  | //PROCESS_SPEC// 
  |  |  **|**  | //PROCESS_SPEC// ``;`` //[PROCESS_SPEC]// 
  | //PROCESS_SPEC// | -> | //PIdent// ``(`` //[Vars]// ``|`` //[PIdent]// ``=>`` //[PIdent]// ``)`` ``=`` //COMS// 
  | //Vars// | -> | //PIdent// 
  | //[Vars]// | -> | **eps**
  |  |  **|**  | //Vars// 
  |  |  **|**  | //Vars// ``,`` //[Vars]// 
  | //FUNCTIONS// | -> | ``%functions`` ``:`` ``{`` //[FUNCTION_SPEC]// ``}`` 
  | //[FUNCTION_SPEC]// | -> | **eps**
  |  |  **|**  | //FUNCTION_SPEC// 
  |  |  **|**  | //FUNCTION_SPEC// ``;`` //[FUNCTION_SPEC]// 
  | //FUNCTION_SPEC// | -> | //PIdent// ``(`` //[Vars]// ``)`` ``=`` //COMS// 
  | //START// | -> | //Main_run// //CHANNEL_SPEC// ``:`` //COMS// 
  |  |  **|**  | **eps**
  | //CHANNEL_SPEC// | -> | ``(`` ``|`` //[PIdent]// ``=>`` //[PIdent]// ``)`` 
  |  |  **|**  | ``(`` //[CInteger]// ``=>`` //[CInteger]// ``)`` 
  | //COMS// | -> | ``{`` //[COM]// ``}`` 
  | //[COM]// | -> | **eps**
  |  |  **|**  | //COM// 
  |  |  **|**  | //COM// ``;`` //[COM]// 
  | //COM// | -> | //PIdent// ``:=`` //COM// 
  |  |  **|**  | //Store// //PIdent// 
  |  |  **|**  | //Load// //PIdent// 
  |  |  **|**  | //Ret// 
  |  |  **|**  | //Call// //PIdent// ``(`` //[PIdent]// ``)`` 
  |  |  **|**  | //ConstInt// //CInteger// 
  |  |  **|**  | //ConstChar// //Character// 
  |  |  **|**  | //ConstString// //String// 
  |  |  **|**  | //ToStr// 
  |  |  **|**  | //ToInt// 
  |  |  **|**  | //And// 
  |  |  **|**  | //Or// 
  |  |  **|**  | //Append// 
  |  |  **|**  | //Unstring// 
  |  |  **|**  | //LeqI// 
  |  |  **|**  | //EqI// 
  |  |  **|**  | //Leqc// 
  |  |  **|**  | //Eqc// 
  |  |  **|**  | //Leqs// 
  |  |  **|**  | //Eqs// 
  |  |  **|**  | //ConcatS// //Integer// 
  |  |  **|**  | //Add// 
  |  |  **|**  | //Subtract// 
  |  |  **|**  | //Mul// 
  |  |  **|**  | //Quot// 
  |  |  **|**  | //Rem// 
  |  |  **|**  | //Cons// ``(`` //PInteger// ``,`` //PInteger// ``)`` 
  |  |  **|**  | //UIdent// ``.`` //UIdent// 
  |  |  **|**  | //UIdent// ``.`` //UIdent// ``(`` //[PIdent]// ``)`` 
  |  |  **|**  | //Case// ``of`` ``{`` //[LABELCOMS]// ``}`` 
  |  |  **|**  | //Rec// ``of`` ``{`` //[LABELCOMS]// ``}`` 
  |  |  **|**  | //UIdent// ``.`` //UIdent// //PIdent// 
  |  |  **|**  | //UIdent// ``.`` //UIdent// ``(`` //[PIdent]// ``)`` //PIdent// 
  |  |  **|**  | //Get// //PIdent// ``on`` //PIdent// 
  |  |  **|**  | //Hput// //PIdent// //UIdent// ``.`` //UIdent// 
  |  |  **|**  | //Hcase// //PIdent// ``of`` ``{`` //[LABELCOMS]// ``}`` 
  |  |  **|**  | //Put// //PIdent// 
  |  |  **|**  | //Split// //PIdent// ``into`` //PIdent// //PIdent// 
  |  |  **|**  | //Fork// //PIdent// ``as`` ``{`` //PIdent// ``with`` //[PIdent]// ``:`` //COMS// ``;`` //PIdent// ``with`` //[PIdent]// ``:`` //COMS// ``}`` 
  |  |  **|**  | //Plug// //[PIdent]// ``as`` ``{`` ``with`` ``[`` //[PIdent]// ``]`` ``:`` //COMS// ``;`` ``with`` ``[`` //[PIdent]// ``]`` ``:`` //COMS// ``}`` 
  |  |  **|**  | //Run// //PIdent// ``(`` //[PIdent]// ``|`` //[PIdent]// ``=>`` //[PIdent]// ``)`` 
  |  |  **|**  | //PIdent// //Ch_Id// //PIdent// 
  |  |  **|**  | ``(`` //[PIdent]// ``)`` 
  |  |  **|**  | ``#`` //CInteger// ``(`` //PIdent// ``)`` 
  |  |  **|**  | //String// 
  |  |  **|**  | //Close// //PIdent// 
  |  |  **|**  | //Halt// //[PIdent]// 
  | //LABELCOMS// | -> | //UIdent// ``.`` //UIdent// ``:`` //COMS// 
  |  |  **|**  | //UIdent// ``.`` //UIdent// ``(`` //[PIdent]// ``)`` ``:`` //COMS// 
  | //[COMS]// | -> | **eps**
  |  |  **|**  | //COMS// 
  |  |  **|**  | //COMS// ``,`` //[COMS]// 
  | //[LABELCOMS]// | -> | **eps**
  |  |  **|**  | //LABELCOMS// 
  |  |  **|**  | //LABELCOMS// ``;`` //[LABELCOMS]// 
  | //[PIdent]// | -> | **eps**
  |  |  **|**  | //PIdent// 
  |  |  **|**  | //PIdent// ``,`` //[PIdent]// 
  | //CInteger// | -> | //PInteger// 
  |  |  **|**  | ``-`` //PInteger// 
  | //[CInteger]// | -> | **eps**
  |  |  **|**  | //CInteger// 
  |  |  **|**  | //CInteger// ``,`` //[CInteger]// 


