-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module LexAMPL where



import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$l = [a-zA-Z\192 - \255] # [\215 \247]    -- isolatin1 letter FIXME
$c = [A-Z\192-\221] # [\215]    -- capital isolatin1 letter FIXME
$s = [a-z\222-\255] # [\247]    -- small isolatin1 letter FIXME
$d = [0-9]                -- digit
$i = [$l $d _ ']          -- identifier character
$u = [\0-\255]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \= | \{ | \} | \; | \/ | \% "include" | \. "ampl" | \% "constructors" | \: | \% "destructors" | \% "handles" | \% "cohandles" | \% "processes" | \( | \| | \= \> | \) | \, | \% "functions" | \: \= | \. | \[ | \] | \# | \-

:-
"--" [.]* ; -- Toss single line comments
"/*" ([$u # \*] | \*+ [$u # [\* \/]])* ("*")+ "/" ;

$white+ ;
@rsyms { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
s t o r e { tok (\p s -> PT p (eitherResIdent (T_Store . share) s)) }
l o a d { tok (\p s -> PT p (eitherResIdent (T_Load . share) s)) }
r e t { tok (\p s -> PT p (eitherResIdent (T_Ret . share) s)) }
c a l l { tok (\p s -> PT p (eitherResIdent (T_Call . share) s)) }
c I n t { tok (\p s -> PT p (eitherResIdent (T_ConstInt . share) s)) }
c C h a r { tok (\p s -> PT p (eitherResIdent (T_ConstChar . share) s)) }
c S t r i n g { tok (\p s -> PT p (eitherResIdent (T_ConstString . share) s)) }
t o S t r { tok (\p s -> PT p (eitherResIdent (T_ToStr . share) s)) }
t o I n t { tok (\p s -> PT p (eitherResIdent (T_ToInt . share) s)) }
A n d { tok (\p s -> PT p (eitherResIdent (T_And . share) s)) }
o r { tok (\p s -> PT p (eitherResIdent (T_Or . share) s)) }
a p p e n d L { tok (\p s -> PT p (eitherResIdent (T_Append . share) s)) }
u n s t r i n g { tok (\p s -> PT p (eitherResIdent (T_Unstring . share) s)) }
l e q { tok (\p s -> PT p (eitherResIdent (T_LeqI . share) s)) }
e q { tok (\p s -> PT p (eitherResIdent (T_EqI . share) s)) }
l e q c { tok (\p s -> PT p (eitherResIdent (T_Leqc . share) s)) }
e q c { tok (\p s -> PT p (eitherResIdent (T_Eqc . share) s)) }
l e q s { tok (\p s -> PT p (eitherResIdent (T_Leqs . share) s)) }
e q s { tok (\p s -> PT p (eitherResIdent (T_Eqs . share) s)) }
c o n c a t S { tok (\p s -> PT p (eitherResIdent (T_ConcatS . share) s)) }
a d d { tok (\p s -> PT p (eitherResIdent (T_Add . share) s)) }
s u b t r a c t { tok (\p s -> PT p (eitherResIdent (T_Subtract . share) s)) }
m u l { tok (\p s -> PT p (eitherResIdent (T_Mul . share) s)) }
q u o t { tok (\p s -> PT p (eitherResIdent (T_Quot . share) s)) }
r e m { tok (\p s -> PT p (eitherResIdent (T_Rem . share) s)) }
c o n s { tok (\p s -> PT p (eitherResIdent (T_Cons . share) s)) }
c a s e { tok (\p s -> PT p (eitherResIdent (T_Case . share) s)) }
r e c { tok (\p s -> PT p (eitherResIdent (T_Rec . share) s)) }
g e t { tok (\p s -> PT p (eitherResIdent (T_Get . share) s)) }
p u t { tok (\p s -> PT p (eitherResIdent (T_Put . share) s)) }
h p u t { tok (\p s -> PT p (eitherResIdent (T_Hput . share) s)) }
h c a s e { tok (\p s -> PT p (eitherResIdent (T_Hcase . share) s)) }
s p l i t { tok (\p s -> PT p (eitherResIdent (T_Split . share) s)) }
f o r k { tok (\p s -> PT p (eitherResIdent (T_Fork . share) s)) }
p l u g { tok (\p s -> PT p (eitherResIdent (T_Plug . share) s)) }
r u n { tok (\p s -> PT p (eitherResIdent (T_Run . share) s)) }
c l o s e { tok (\p s -> PT p (eitherResIdent (T_Close . share) s)) }
h a l t { tok (\p s -> PT p (eitherResIdent (T_Halt . share) s)) }
\= \= { tok (\p s -> PT p (eitherResIdent (T_Ch_Id . share) s)) }
\% r u n { tok (\p s -> PT p (eitherResIdent (T_Main_run . share) s)) }
\' ($u # [\' \\]| \\ [\' \\ n t]) \' { tok (\p s -> PT p (eitherResIdent (T_Character . share) s)) }
$c ($l | $d | \_)* { tok (\p s -> PT p (eitherResIdent (T_UIdent . share) s)) }
$l ($l | $d | \_ | \')* { tok (\p s -> PT p (eitherResIdent (T_PIdent . share) s)) }
$d + { tok (\p s -> PT p (eitherResIdent (T_PInteger . share) s)) }

$l $i*   { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t)))* \"{ tok (\p s -> PT p (TL $ share $ unescapeInitTail s)) }

$d+      { tok (\p s -> PT p (TI $ share s))    }


{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals
 | T_Store !String
 | T_Load !String
 | T_Ret !String
 | T_Call !String
 | T_ConstInt !String
 | T_ConstChar !String
 | T_ConstString !String
 | T_ToStr !String
 | T_ToInt !String
 | T_And !String
 | T_Or !String
 | T_Append !String
 | T_Unstring !String
 | T_LeqI !String
 | T_EqI !String
 | T_Leqc !String
 | T_Eqc !String
 | T_Leqs !String
 | T_Eqs !String
 | T_ConcatS !String
 | T_Add !String
 | T_Subtract !String
 | T_Mul !String
 | T_Quot !String
 | T_Rem !String
 | T_Cons !String
 | T_Case !String
 | T_Rec !String
 | T_Get !String
 | T_Put !String
 | T_Hput !String
 | T_Hcase !String
 | T_Split !String
 | T_Fork !String
 | T_Plug !String
 | T_Run !String
 | T_Close !String
 | T_Halt !String
 | T_Ch_Id !String
 | T_Main_run !String
 | T_Character !String
 | T_UIdent !String
 | T_PIdent !String
 | T_PInteger !String

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

tokenPos :: [Token] -> String
tokenPos (PT (Pn _ l _) _ :_) = "line " ++ show l
tokenPos (Err (Pn _ l _) :_) = "line " ++ show l
tokenPos _ = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  PT _ (T_Store s) -> s
  PT _ (T_Load s) -> s
  PT _ (T_Ret s) -> s
  PT _ (T_Call s) -> s
  PT _ (T_ConstInt s) -> s
  PT _ (T_ConstChar s) -> s
  PT _ (T_ConstString s) -> s
  PT _ (T_ToStr s) -> s
  PT _ (T_ToInt s) -> s
  PT _ (T_And s) -> s
  PT _ (T_Or s) -> s
  PT _ (T_Append s) -> s
  PT _ (T_Unstring s) -> s
  PT _ (T_LeqI s) -> s
  PT _ (T_EqI s) -> s
  PT _ (T_Leqc s) -> s
  PT _ (T_Eqc s) -> s
  PT _ (T_Leqs s) -> s
  PT _ (T_Eqs s) -> s
  PT _ (T_ConcatS s) -> s
  PT _ (T_Add s) -> s
  PT _ (T_Subtract s) -> s
  PT _ (T_Mul s) -> s
  PT _ (T_Quot s) -> s
  PT _ (T_Rem s) -> s
  PT _ (T_Cons s) -> s
  PT _ (T_Case s) -> s
  PT _ (T_Rec s) -> s
  PT _ (T_Get s) -> s
  PT _ (T_Put s) -> s
  PT _ (T_Hput s) -> s
  PT _ (T_Hcase s) -> s
  PT _ (T_Split s) -> s
  PT _ (T_Fork s) -> s
  PT _ (T_Plug s) -> s
  PT _ (T_Run s) -> s
  PT _ (T_Close s) -> s
  PT _ (T_Halt s) -> s
  PT _ (T_Ch_Id s) -> s
  PT _ (T_Main_run s) -> s
  PT _ (T_Character s) -> s
  PT _ (T_UIdent s) -> s
  PT _ (T_PIdent s) -> s
  PT _ (T_PInteger s) -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b ":" 16 (b "%processes" 8 (b "%destructors" 4 (b "%cohandles" 2 (b "#" 1 N N) (b "%constructors" 3 N N)) (b "%handles" 6 (b "%functions" 5 N N) (b "%include" 7 N N))) (b "-" 12 (b ")" 10 (b "(" 9 N N) (b "," 11 N N)) (b ".ampl" 14 (b "." 13 N N) (b "/" 15 N N)))) (b "into" 24 (b "=>" 20 (b ";" 18 (b ":=" 17 N N) (b "=" 19 N N)) (b "]" 22 (b "[" 21 N N) (b "as" 23 N N))) (b "{" 28 (b "on" 26 (b "of" 25 N N) (b "with" 27 N N)) (b "}" 30 (b "|" 29 N N) N)))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
