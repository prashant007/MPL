module SkelAMPL where

-- Haskell module generated by the BNF converter

import AbsAMPL
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transStore :: Store -> Result
transStore x = case x of
  Store string -> failure x
transLoad :: Load -> Result
transLoad x = case x of
  Load string -> failure x
transRet :: Ret -> Result
transRet x = case x of
  Ret string -> failure x
transCall :: Call -> Result
transCall x = case x of
  Call string -> failure x
transConstInt :: ConstInt -> Result
transConstInt x = case x of
  ConstInt string -> failure x
transConstChar :: ConstChar -> Result
transConstChar x = case x of
  ConstChar string -> failure x
transConstString :: ConstString -> Result
transConstString x = case x of
  ConstString string -> failure x
transToStr :: ToStr -> Result
transToStr x = case x of
  ToStr string -> failure x
transToInt :: ToInt -> Result
transToInt x = case x of
  ToInt string -> failure x
transAnd :: And -> Result
transAnd x = case x of
  And string -> failure x
transOr :: Or -> Result
transOr x = case x of
  Or string -> failure x
transAppend :: Append -> Result
transAppend x = case x of
  Append string -> failure x
transUnstring :: Unstring -> Result
transUnstring x = case x of
  Unstring string -> failure x
transLeqI :: LeqI -> Result
transLeqI x = case x of
  LeqI string -> failure x
transEqI :: EqI -> Result
transEqI x = case x of
  EqI string -> failure x
transLeqc :: Leqc -> Result
transLeqc x = case x of
  Leqc string -> failure x
transEqc :: Eqc -> Result
transEqc x = case x of
  Eqc string -> failure x
transLeqs :: Leqs -> Result
transLeqs x = case x of
  Leqs string -> failure x
transEqs :: Eqs -> Result
transEqs x = case x of
  Eqs string -> failure x
transConcatS :: ConcatS -> Result
transConcatS x = case x of
  ConcatS string -> failure x
transAdd :: Add -> Result
transAdd x = case x of
  Add string -> failure x
transSubtract :: Subtract -> Result
transSubtract x = case x of
  Subtract string -> failure x
transMul :: Mul -> Result
transMul x = case x of
  Mul string -> failure x
transQuot :: Quot -> Result
transQuot x = case x of
  Quot string -> failure x
transRem :: Rem -> Result
transRem x = case x of
  Rem string -> failure x
transCons :: Cons -> Result
transCons x = case x of
  Cons string -> failure x
transCase :: Case -> Result
transCase x = case x of
  Case string -> failure x
transRec :: Rec -> Result
transRec x = case x of
  Rec string -> failure x
transGet :: Get -> Result
transGet x = case x of
  Get string -> failure x
transPut :: Put -> Result
transPut x = case x of
  Put string -> failure x
transHput :: Hput -> Result
transHput x = case x of
  Hput string -> failure x
transHcase :: Hcase -> Result
transHcase x = case x of
  Hcase string -> failure x
transSplit :: Split -> Result
transSplit x = case x of
  Split string -> failure x
transFork :: Fork -> Result
transFork x = case x of
  Fork string -> failure x
transPlug :: Plug -> Result
transPlug x = case x of
  Plug string -> failure x
transRun :: Run -> Result
transRun x = case x of
  Run string -> failure x
transClose :: Close -> Result
transClose x = case x of
  Close string -> failure x
transHalt :: Halt -> Result
transHalt x = case x of
  Halt string -> failure x
transCh_Id :: Ch_Id -> Result
transCh_Id x = case x of
  Ch_Id string -> failure x
transMain_run :: Main_run -> Result
transMain_run x = case x of
  Main_run string -> failure x
transCharacter :: Character -> Result
transCharacter x = case x of
  Character string -> failure x
transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent string -> failure x
transPIdent :: PIdent -> Result
transPIdent x = case x of
  PIdent string -> failure x
transPInteger :: PInteger -> Result
transPInteger x = case x of
  PInteger string -> failure x
transAMPLCODE :: AMPLCODE -> Result
transAMPLCODE x = case x of
  Main amplconstructss start -> failure x
transAMPL_CONSTRUCTS :: AMPL_CONSTRUCTS -> Result
transAMPL_CONSTRUCTS x = case x of
  IMPORT_CONSTRUCT import_ -> failure x
  HANDLE_CONSTRUCT handles -> failure x
  COHANDLE_CONSTRUCT cohandles -> failure x
  CONSTRUCTOR_CONSTRUCT constructors -> failure x
  DESTRUCTOR_CONSTRUCT destructors -> failure x
  PROCESSES_CONSTRUCT processes -> failure x
  FUNCTIONS_CONSTRUCT functions -> failure x
transHANDLE_SPEC :: HANDLE_SPEC -> Result
transHANDLE_SPEC x = case x of
  Hand_spec uident handles -> failure x
transHandle :: Handle -> Result
transHandle x = case x of
  HandName uident -> failure x
transIMPORTS :: IMPORTS -> Result
transIMPORTS x = case x of
  Imports imports -> failure x
transLUIDENT :: LUIDENT -> Result
transLUIDENT x = case x of
  LIDENT pident -> failure x
  UIDENT uident -> failure x
transDirPath :: DirPath -> Result
transDirPath x = case x of
  DIRPATH luidents -> failure x
transSlash :: Slash -> Result
transSlash x = case x of
  SLASH -> failure x
  SLASH_NONE -> failure x
transIMPORT :: IMPORT -> Result
transIMPORT x = case x of
  Import slash dirpath -> failure x
transCONSTRUCTORS :: CONSTRUCTORS -> Result
transCONSTRUCTORS x = case x of
  Constructors structorspecs -> failure x
transDESTRUCTORS :: DESTRUCTORS -> Result
transDESTRUCTORS x = case x of
  Destructors structorspecs -> failure x
transSTRUCTOR_SPEC :: STRUCTOR_SPEC -> Result
transSTRUCTOR_SPEC x = case x of
  Struct_spec uident structs -> failure x
transSTRUCT :: STRUCT -> Result
transSTRUCT x = case x of
  Struct uident pinteger -> failure x
transHANDLES :: HANDLES -> Result
transHANDLES x = case x of
  Handles handlespecs -> failure x
transCOHANDLES :: COHANDLES -> Result
transCOHANDLES x = case x of
  Cohandles handlespecs -> failure x
transPROCESSES :: PROCESSES -> Result
transPROCESSES x = case x of
  Processes processspecs -> failure x
transPROCESS_SPEC :: PROCESS_SPEC -> Result
transPROCESS_SPEC x = case x of
  Process_spec pident varss pidents1 pidents2 coms -> failure x
transVars :: Vars -> Result
transVars x = case x of
  VName pident -> failure x
transFUNCTIONS :: FUNCTIONS -> Result
transFUNCTIONS x = case x of
  Functions functionspecs -> failure x
transFUNCTION_SPEC :: FUNCTION_SPEC -> Result
transFUNCTION_SPEC x = case x of
  Function_spec pident varss coms -> failure x
transSTART :: START -> Result
transSTART x = case x of
  Start mainrun channelspec coms -> failure x
  Start_none -> failure x
transCHANNEL_SPEC :: CHANNEL_SPEC -> Result
transCHANNEL_SPEC x = case x of
  Channel_specf pidents1 pidents2 -> failure x
  Channel_spec cintegers1 cintegers2 -> failure x
transCOMS :: COMS -> Result
transCOMS x = case x of
  Prog coms -> failure x
transCOM :: COM -> Result
transCOM x = case x of
  AC_ASSIGN pident com -> failure x
  AC_STOREf store pident -> failure x
  AC_LOADf load pident -> failure x
  AC_RET ret -> failure x
  AC_CALLf call pident pidents -> failure x
  AC_INT constint cinteger -> failure x
  AC_CHAR constchar character -> failure x
  AC_STRING conststring string -> failure x
  AC_TOSTR tostr -> failure x
  AC_TOINT toint -> failure x
  AC_AND and -> failure x
  AC_OR or -> failure x
  AC_APPEND append -> failure x
  AC_UNSTRING unstring -> failure x
  AC_LEQ leqi -> failure x
  AC_EQ eqi -> failure x
  AC_LEQC leqc -> failure x
  AC_EQC eqc -> failure x
  AC_LEQS leqs -> failure x
  AC_EQS eqs -> failure x
  AC_CONCAT concats integer -> failure x
  AC_ADD add -> failure x
  AC_SUB subtract -> failure x
  AC_MUL mul -> failure x
  AC_DIVQ quot -> failure x
  AC_DIVR rem -> failure x
  AC_CONS cons pinteger1 pinteger2 -> failure x
  AC_STRUCT uident1 uident2 -> failure x
  AC_STRUCTas uident1 uident2 pidents -> failure x
  AC_CASEf case_ labelcomss -> failure x
  AC_RECORDf rec labelcomss -> failure x
  AC_DESTl uident1 uident2 pident -> failure x
  AC_DESTlas uident1 uident2 pidents pident -> failure x
  AC_GETf get pident1 pident2 -> failure x
  AC_HPUTf hput pident uident1 uident2 -> failure x
  AC_HCASEf hcase pident labelcomss -> failure x
  AC_PUTf put pident -> failure x
  AC_SPLITf split pident1 pident2 pident3 -> failure x
  AC_FORKf fork pident1 pident2 pidents1 coms1 pident3 pidents2 coms2 -> failure x
  AC_PLUGf plug pidents1 pidents2 coms1 pidents3 coms2 -> failure x
  AC_RUNf run pident pidents1 pidents2 pidents3 -> failure x
  AC_IDF pident1 chid pident2 -> failure x
  AC_PROD pidents -> failure x
  AC_PRODELEM cinteger pident -> failure x
  AC_EMSG string -> failure x
  AC_CLOSEf close pident -> failure x
  AC_HALTf halt pidents -> failure x
transLABELCOMS :: LABELCOMS -> Result
transLABELCOMS x = case x of
  Labelcoms1 uident1 uident2 coms -> failure x
  Labelcoms2 uident1 uident2 pidents coms -> failure x
transCInteger :: CInteger -> Result
transCInteger x = case x of
  Positive pinteger -> failure x
  Negative pinteger -> failure x

