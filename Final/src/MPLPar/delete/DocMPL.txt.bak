The Language MPL
BNF Converter


%This txt2tags file is machine-generated by the BNF-converter
%Process by txt2tags to generate html or latex



This document was automatically generated by the //BNF-Converter//. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).

==The lexical structure of MPL==

===Literals===
Double-precision float literals //Double// have the structure
indicated by the regular expression ``digit+ '.' digit+ ('e' ('-')? digit+)?`` i.e.\
two sequences of digits separated by a decimal point, optionally
followed by an unsigned or negative exponent.
















































TokUnit literals are recognized by the regular expression
`````'(' ')'`````

TokSBrO literals are recognized by the regular expression
`````'['`````

TokSBrC literals are recognized by the regular expression
`````']'`````

TokDefn literals are recognized by the regular expression
`````{"defn"}`````

TokRun literals are recognized by the regular expression
`````{"run"}`````

TokTerm literals are recognized by the regular expression
`````{"term"}`````

TokData literals are recognized by the regular expression
`````{"data"}`````

TokCodata literals are recognized by the regular expression
`````{"codata"}`````

TokType literals are recognized by the regular expression
`````{"type"}`````

TokProtocol literals are recognized by the regular expression
`````{"protocol"}`````

TokCoprotocol literals are recognized by the regular expression
`````{"coprotocol"}`````

TokGetProt literals are recognized by the regular expression
`````{"Get"}`````

TokPutProt literals are recognized by the regular expression
`````{"Put"}`````

TokNeg literals are recognized by the regular expression
`````{"neg"}`````

TokTopBot literals are recognized by the regular expression
`````{"TopBot"}`````

TokFun literals are recognized by the regular expression
`````{"fun"}`````

TokDefault literals are recognized by the regular expression
`````{"default"}`````

TokRecord literals are recognized by the regular expression
`````{"record"}`````

TokIf literals are recognized by the regular expression
`````{"if"}`````

TokLet literals are recognized by the regular expression
`````{"let"}`````

TokFold literals are recognized by the regular expression
`````{"fold"}`````

TokUnfold literals are recognized by the regular expression
`````{"unfold"}`````

TokCase literals are recognized by the regular expression
`````{"case"}`````

TokProc literals are recognized by the regular expression
`````{"proc"}`````

TokClose literals are recognized by the regular expression
`````{"close"}`````

TokHalt literals are recognized by the regular expression
`````{"halt"}`````

TokGet literals are recognized by the regular expression
`````{"get"}`````

TokPut literals are recognized by the regular expression
`````{"put"}`````

TokHCase literals are recognized by the regular expression
`````{"hcase"}`````

TokHPut literals are recognized by the regular expression
`````{"hput"}`````

TokSplit literals are recognized by the regular expression
`````{"split"}`````

TokFork literals are recognized by the regular expression
`````{"fork"}`````

TokDCare literals are recognized by the regular expression
`````{"_"}`````

TokString literals are recognized by the regular expression
`````'"' letter (letter | digit | '_' | ''')* '"'`````

UIdent literals are recognized by the regular expression
`````upper (letter | digit | '_')*`````

PIdent literals are recognized by the regular expression
`````letter (letter | digit | '_' | ''')*`````

PInteger literals are recognized by the regular expression
`````digit+`````

Infix0op literals are recognized by the regular expression
`````{"||"}`````

Infix1op literals are recognized by the regular expression
`````{"&&"}`````

Infix2op literals are recognized by the regular expression
`````{"=="} | {"/="} | '<' | '>' | {"<="} | {">="}`````

Infix3op literals are recognized by the regular expression
`````{"++"}`````

Infix4op literals are recognized by the regular expression
`````'+' | '-'`````

Infix5op literals are recognized by the regular expression
`````'*' | '/' | '%'`````

Infix6op literals are recognized by the regular expression
`````'^'`````

Infix7op literals are recognized by the regular expression
`````{"!!"}`````


===Reserved words and symbols===
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.

The reserved words used in MPL are the following:
  | ``Neg`` | ``and`` | ``as`` | ``do``
  | ``else`` | ``into`` | ``neg`` | ``of``
  | ``on`` | ``plug`` | ``switch`` | ``then``
  | ``where`` | ``with`` |  | 

The symbols used in MPL are the following:
  | { | } | ; | ::
  | => | = | , | ->
  | ( | ) | < | >
  | (*) | (+) | | | :
  | (: | :) | := | |=|

===Comments===
Single-line comments begin with --.Multiple-line comments are  enclosed with {- and -}.

==The syntactic structure of MPL==
Non-terminals are enclosed between < and >. 
The symbols -> (production),  **|**  (union) 
and **eps** (empty rule) belong to the BNF notation. 
All other symbols are terminals.

  | //MPL// | -> | //[MPLstmt]// //RUNstmt// 
  | //[MPLstmt]// | -> | **eps**
  |  |  **|**  | //MPLstmt// //[MPLstmt]// 
  | //MPLstmt// | -> | //TokDefn// ``of`` ``{`` //[Defn]// ``}`` ``where`` ``{`` //[MPLstmtAlt]// ``}`` 
  |  |  **|**  | //TokDefn// ``of`` ``{`` //[Defn]// ``}`` 
  |  |  **|**  | //Defn// 
  | //MPLstmtAlt// | -> | //MPLstmt// 
  | //[MPLstmtAlt]// | -> | **eps**
  |  |  **|**  | //MPLstmtAlt// 
  |  |  **|**  | //MPLstmtAlt// ``;`` //[MPLstmtAlt]// 
  | //RUNstmt// | -> | //TokRun// ``::`` //[Protocol]// ``=>`` //[Protocol]// ``=`` ``{`` //[Channel]// ``=>`` //[Channel]// //Process// ``}`` 
  |  |  **|**  | //TokRun// //[Channel]// ``=>`` //[Channel]// //Process// 
  | //[Defn]// | -> | //Defn// 
  |  |  **|**  | //Defn// ``;`` //[Defn]// 
  | //Defn// | -> | //TypeDefn// 
  |  |  **|**  | //CTypeDefn// 
  |  |  **|**  | //FunctionDefn// 
  |  |  **|**  | //ProcessDef// 
  | //TypeDefn// | -> | //TokData// //[DataClause]// 
  |  |  **|**  | //TokCodata// //[CoDataClause]// 
  |  |  **|**  | //TokType// //[TypeSpec]// ``=`` ``{`` //Type// ``}`` 
  | //[DataClause]// | -> | //DataClause// 
  |  |  **|**  | //DataClause// ``and`` //[DataClause]// 
  | //[CoDataClause]// | -> | //CoDataClause// 
  |  |  **|**  | //CoDataClause// ``and`` //[CoDataClause]// 
  | //[TypeSpec]// | -> | **eps**
  |  |  **|**  | //TypeSpec// 
  |  |  **|**  | //TypeSpec// ``,`` //[TypeSpec]// 
  | //DataClause// | -> | //TypeSpec// ``->`` //UIdent// ``=`` ``{`` //[DataPhrase]// ``}`` 
  | //CoDataClause// | -> | //UIdent// ``->`` //TypeSpec// ``=`` ``{`` //[CoDataPhrase]// ``}`` 
  | //[DataPhrase]// | -> | **eps**
  |  |  **|**  | //DataPhrase// 
  |  |  **|**  | //DataPhrase// ``;`` //[DataPhrase]// 
  | //[CoDataPhrase]// | -> | **eps**
  |  |  **|**  | //CoDataPhrase// 
  |  |  **|**  | //CoDataPhrase// ``;`` //[CoDataPhrase]// 
  | //DataPhrase// | -> | //[Structor]// ``::`` //[Type]// ``->`` //UIdent// 
  | //CoDataPhrase// | -> | //[Structor]// ``::`` //[Type]// ``->`` //Type// 
  | //[Structor]// | -> | //Structor// 
  |  |  **|**  | //Structor// ``,`` //[Structor]// 
  | //[Type]// | -> | **eps**
  |  |  **|**  | //Type// 
  |  |  **|**  | //Type// ``,`` //[Type]// 
  | //Structor// | -> | //UIdent// 
  | //TypeSpec// | -> | //UIdent// ``(`` //[TypeParam]// ``)`` 
  |  |  **|**  | //UIdent// 
  | //[TypeParam]// | -> | **eps**
  |  |  **|**  | //TypeParam// 
  |  |  **|**  | //TypeParam// ``,`` //[TypeParam]// 
  | //TypeParam// | -> | //UIdent// 
  | //Type// | -> | //TypeN// ``=>`` //Type// 
  |  |  **|**  | //TypeN// 
  | //TypeN// | -> | //TokUnit// 
  |  |  **|**  | //TokSBrO// //TypeN// //TokSBrC// 
  |  |  **|**  | //UIdent// ``(`` //[Type]// ``)`` 
  |  |  **|**  | //UIdent// 
  |  |  **|**  | ``<`` //[Type]// ``>`` 
  |  |  **|**  | ``(`` //Type// ``)`` 
  | //[TypeN]// | -> | **eps**
  |  |  **|**  | //TypeN// 
  |  |  **|**  | //TypeN// ``,`` //[TypeN]// 
  | //[UIdent]// | -> | **eps**
  |  |  **|**  | //UIdent// 
  |  |  **|**  | //UIdent// ``,`` //[UIdent]// 
  | //CTypeDefn// | -> | //TokProtocol// //ProtocolClause// 
  |  |  **|**  | //TokCoprotocol// //CoProtocolClause// 
  | //ProtocolClause// | -> | //TypeSpec// ``=>`` //UIdent// ``=`` ``{`` //[ProtocolPhrase]// ``}`` 
  | //CoProtocolClause// | -> | //UIdent// ``=>`` //TypeSpec// ``=`` ``{`` //[CoProtocolPhrase]// ``}`` 
  | //[ProtocolPhrase]// | -> | **eps**
  |  |  **|**  | //ProtocolPhrase// 
  |  |  **|**  | //ProtocolPhrase// ``;`` //[ProtocolPhrase]// 
  | //[CoProtocolPhrase]// | -> | **eps**
  |  |  **|**  | //CoProtocolPhrase// 
  |  |  **|**  | //CoProtocolPhrase// ``;`` //[CoProtocolPhrase]// 
  | //ProtocolPhrase// | -> | //UIdent// ``::`` //Protocol// ``=>`` //UIdent// 
  | //CoProtocolPhrase// | -> | //UIdent// ``::`` //UIdent// ``=>`` //Protocol// 
  | //Protocol// | -> | //Protocol1// 
  |  |  **|**  | //Protocol1// ``(*)`` //Protocol// 
  |  |  **|**  | //Protocol1// ``(+)`` //Protocol// 
  | //Protocol1// | -> | ``(`` //Protocol// ``)`` 
  |  |  **|**  | //TokGetProt// ``(`` //Type// ``|`` //Protocol// ``)`` 
  |  |  **|**  | //TokPutProt// ``(`` //Type// ``|`` //Protocol// ``)`` 
  |  |  **|**  | ``Neg`` ``(`` //Protocol// ``)`` 
  |  |  **|**  | //TokTopBot// 
  |  |  **|**  | //UIdent// ``(`` //[Type]// ``)`` 
  |  |  **|**  | //UIdent// 
  | //[Protocol]// | -> | **eps**
  |  |  **|**  | //Protocol// 
  |  |  **|**  | //Protocol// ``,`` //[Protocol]// 
  | //FunctionDefn// | -> | //TokFun// //PIdent// ``::`` //[Type]// ``->`` //Type// ``=`` ``{`` //[PattTermPharse]// ``}`` 
  |  |  **|**  | //TokFun// //PIdent// ``=`` ``{`` //[PattTermPharse]// ``}`` 
  | //[FunctionDefn]// | -> | //FunctionDefn// 
  |  |  **|**  | //FunctionDefn// ``;`` //[FunctionDefn]// 
  | //[PattTermPharse]// | -> | //PattTermPharse// 
  |  |  **|**  | //PattTermPharse// ``;`` //[PattTermPharse]// 
  | //[PIdent]// | -> | **eps**
  |  |  **|**  | //PIdent// 
  |  |  **|**  | //PIdent// ``,`` //[PIdent]// 
  | //FoldPattern// | -> | //UIdent// ``:`` //[PIdent]// ``=`` ``{`` //Term// ``}`` 
  | //[FoldPattern]// | -> | **eps**
  |  |  **|**  | //FoldPattern// 
  |  |  **|**  | //FoldPattern// ``;`` //[FoldPattern]// 
  | //PattTermPharse// | -> | //[Pattern]// ``->`` //Term// 
  |  |  **|**  | //[Pattern]// ``->`` ``switch`` ``{`` //[GuardedTerm]// ``}`` 
  | //[GuardedTerm]// | -> | //GuardedTerm// 
  |  |  **|**  | //GuardedTerm// ``;`` //[GuardedTerm]// 
  | //GuardedTerm// | -> | //Term// ``=`` ``{`` //Term// ``}`` 
  |  |  **|**  | //TokDefault// ``=`` ``{`` //Term// ``}`` 
  | //[Pattern]// | -> | **eps**
  |  |  **|**  | //Pattern// 
  |  |  **|**  | //Pattern// ``,`` //[Pattern]// 
  | //Pattern// | -> | //Pattern1// ``:`` //Pattern// 
  |  |  **|**  | //Pattern1// 
  | //Pattern1// | -> | //UIdent// ``(`` //[Pattern]// ``)`` 
  |  |  **|**  | //UIdent// 
  |  |  **|**  | //TokSBrO// //[Pattern]// //TokSBrC// 
  |  |  **|**  | ``<`` //[Pattern]// ``>`` 
  |  |  **|**  | //PIdent// 
  |  |  **|**  | //TokString// 
  |  |  **|**  | //PInteger// 
  |  |  **|**  | //TokDCare// 
  |  |  **|**  | ``(`` //Pattern// ``)`` 
  | //Term// | -> | //Term1// ``:`` //Term// 
  |  |  **|**  | //Term1// 
  | //Term1// | -> | //Term1// //Infix0op// //Term2// 
  |  |  **|**  | //Term2// 
  | //Term2// | -> | //Term2// //Infix1op// //Term3// 
  |  |  **|**  | //Term3// 
  | //Term3// | -> | //Term3// //Infix2op// //Term4// 
  |  |  **|**  | //Term4// 
  | //Term4// | -> | //Term4// //Infix3op// //Term5// 
  |  |  **|**  | //Term5// 
  | //Term5// | -> | //Term5// //Infix4op// //Term6// 
  |  |  **|**  | //Term6// 
  | //Term6// | -> | //Term6// //Infix5op// //Term7// 
  |  |  **|**  | //Term7// 
  | //Term7// | -> | //Term8// //Infix6op// //Term7// 
  |  |  **|**  | //Term8// 
  | //Term8// | -> | //Term8// //Infix7op// //Term9// 
  |  |  **|**  | //Term9// 
  | //Term9// | -> | //TokSBrO// //[Term]// //TokSBrC// 
  |  |  **|**  | //TokLet// //Term// ``where`` ``{`` //[LetWhere]// ``}`` 
  |  |  **|**  | //PIdent// 
  |  |  **|**  | //ConstantType// 
  |  |  **|**  | //TokIf// //Term// ``then`` //Term// ``else`` ``{`` //Term// ``}`` 
  |  |  **|**  | //TokUnfold// //PIdent// ``with`` ``{`` //[FoldPattern]// ``}`` 
  |  |  **|**  | //TokFold// //PIdent// ``of`` ``{`` //[FoldPattern]// ``}`` 
  |  |  **|**  | //TokCase// //Term// ``of`` ``{`` //[PattTermPharse]// ``}`` 
  |  |  **|**  | //UIdent// ``(`` //[Term]// ``)`` 
  |  |  **|**  | //UIdent// 
  |  |  **|**  | ``<`` //[Term]// ``>`` 
  |  |  **|**  | //PIdent// ``(`` //[Term]// ``)`` 
  |  |  **|**  | //TokRecord// ``of`` ``{`` //[RecordEntry]// ``}`` 
  |  |  **|**  | ``(:`` //[RecordEntryAlt]// ``:)`` 
  |  |  **|**  | ``(`` //Term// ``)`` 
  | //LetWhere// | -> | //Defn// 
  |  |  **|**  | //PattTerm// 
  | //[LetWhere]// | -> | //LetWhere// 
  |  |  **|**  | //LetWhere// ``;`` //[LetWhere]// 
  | //PattTerm// | -> | //Pattern// ``=`` ``{`` //Term// ``}`` 
  | //[RecordEntry]// | -> | **eps**
  |  |  **|**  | //RecordEntry// 
  |  |  **|**  | //RecordEntry// ``;`` //[RecordEntry]// 
  | //[RecordEntryAlt]// | -> | **eps**
  |  |  **|**  | //RecordEntryAlt// 
  |  |  **|**  | //RecordEntryAlt// ``,`` //[RecordEntryAlt]// 
  | //[Term]// | -> | **eps**
  |  |  **|**  | //Term// 
  |  |  **|**  | //Term// ``,`` //[Term]// 
  | //ConstantType// | -> | //PInteger// 
  |  |  **|**  | //TokString// 
  |  |  **|**  | //Double// 
  | //RecordEntryAlt// | -> | //RecordEntry// 
  | //RecordEntry// | -> | //Pattern// ``:=`` //Term// 
  | //ProcessDef// | -> | //TokProc// //PIdent// ``::`` //[Type]// ``|`` //[Protocol]// ``=>`` //[Protocol]// ``=`` ``{`` //PatProcessPhr// ``}`` 
  |  |  **|**  | //TokProc// //PIdent// ``=`` ``{`` //PatProcessPhr// ``}`` 
  | //PatProcessPhr// | -> | //[Pattern]// ``|`` //[Channel]// ``=>`` //[Channel]// //Process// 
  | //[Channel]// | -> | **eps**
  |  |  **|**  | //Channel// 
  |  |  **|**  | //Channel// ``,`` //[Channel]// 
  | //Process// | -> | ``->`` ``do`` ``{`` //[ProcessCommand]// ``}`` 
  |  |  **|**  | ``->`` //ProcessCommand// 
  | //[ProcessCommand]// | -> | **eps**
  |  |  **|**  | //ProcessCommand// 
  |  |  **|**  | //ProcessCommand// ``;`` //[ProcessCommand]// 
  | //ProcessCommand// | -> | //PIdent// ``(`` //[Term]// ``|`` //[Channel]// ``=>`` //[Channel]// ``)`` 
  |  |  **|**  | //TokClose// //Channel// 
  |  |  **|**  | //TokHalt// //Channel// 
  |  |  **|**  | //TokGet// //PIdent// ``on`` //Channel// 
  |  |  **|**  | //TokHCase// //Channel// ``of`` ``{`` //[Handler]// ``}`` 
  |  |  **|**  | //TokPut// //Term// ``on`` //Channel// 
  |  |  **|**  | //TokHPut// //UIdent// ``on`` //Channel// 
  |  |  **|**  | //TokSplit// //Channel// ``into`` //[Channel]// 
  |  |  **|**  | //TokFork// //PIdent// ``as`` ``{`` //[ForkPart]// ``}`` 
  |  |  **|**  | ``plug`` ``{`` //[PlugPart]// ``}`` 
  |  |  **|**  | //Channel// ``|=|`` //PChannel// 
  |  |  **|**  | //Channel// ``=`` ``{`` ``neg`` //Channel// ``}`` 
  |  |  **|**  | //TokCase// //Term// ``of`` ``{`` //[ProcessPhrase]// ``}`` 
  | //PlugPart// | -> | ``do`` ``{`` //[ProcessCommand]// ``}`` 
  |  |  **|**  | //ProcessCommand// 
  | //[PlugPart]// | -> | //PlugPart// 
  |  |  **|**  | //PlugPart// ``;`` //[PlugPart]// 
  | //[ForkPart]// | -> | //ForkPart// 
  |  |  **|**  | //ForkPart// ``;`` //[ForkPart]// 
  | //ForkPart// | -> | //PIdent// //Process// 
  | //[Handler]// | -> | **eps**
  |  |  **|**  | //Handler// 
  |  |  **|**  | //Handler// ``;`` //[Handler]// 
  | //Handler// | -> | //UIdent// //Process// 
  | //[ProcessPhrase]// | -> | **eps**
  |  |  **|**  | //ProcessPhrase// 
  |  |  **|**  | //ProcessPhrase// ``;`` //[ProcessPhrase]// 
  | //ProcessPhrase// | -> | //Pattern// //Process// 
  | //[GuardProcessPhrase]// | -> | //GuardProcessPhrase// 
  |  |  **|**  | //GuardProcessPhrase// ``;`` //[GuardProcessPhrase]// 
  | //GuardProcessPhrase// | -> | //Term// ``=`` ``{`` //[ProcessCommand]// ``}`` 
  |  |  **|**  | //TokDefault// ``=`` ``{`` //[ProcessCommand]// ``}`` 
  | //PChannel// | -> | //PIdent// 
  |  |  **|**  | ``neg`` //PIdent// 
  | //Channel// | -> | //PIdent// 


