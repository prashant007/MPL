{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintMPL where

-- pretty-printer generated by the BNF converter

import AbsMPL
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print TokUnit where
  prt _ (TokUnit (_,i)) = doc (showString ( i))


instance Print TokSBrO where
  prt _ (TokSBrO (_,i)) = doc (showString ( i))


instance Print TokSBrC where
  prt _ (TokSBrC (_,i)) = doc (showString ( i))


instance Print TokDefn where
  prt _ (TokDefn (_,i)) = doc (showString ( i))


instance Print TokRun where
  prt _ (TokRun (_,i)) = doc (showString ( i))


instance Print TokTerm where
  prt _ (TokTerm (_,i)) = doc (showString ( i))


instance Print TokData where
  prt _ (TokData (_,i)) = doc (showString ( i))


instance Print TokCodata where
  prt _ (TokCodata (_,i)) = doc (showString ( i))


instance Print TokType where
  prt _ (TokType (_,i)) = doc (showString ( i))


instance Print TokProtocol where
  prt _ (TokProtocol (_,i)) = doc (showString ( i))


instance Print TokCoprotocol where
  prt _ (TokCoprotocol (_,i)) = doc (showString ( i))


instance Print TokGetProt where
  prt _ (TokGetProt (_,i)) = doc (showString ( i))


instance Print TokPutProt where
  prt _ (TokPutProt (_,i)) = doc (showString ( i))


instance Print TokNeg where
  prt _ (TokNeg (_,i)) = doc (showString ( i))


instance Print TokTopBot where
  prt _ (TokTopBot (_,i)) = doc (showString ( i))


instance Print TokFun where
  prt _ (TokFun (_,i)) = doc (showString ( i))


instance Print TokDefault where
  prt _ (TokDefault (_,i)) = doc (showString ( i))


instance Print TokRecord where
  prt _ (TokRecord (_,i)) = doc (showString ( i))


instance Print TokIf where
  prt _ (TokIf (_,i)) = doc (showString ( i))


instance Print TokLet where
  prt _ (TokLet (_,i)) = doc (showString ( i))


instance Print TokFold where
  prt _ (TokFold (_,i)) = doc (showString ( i))


instance Print TokUnfold where
  prt _ (TokUnfold (_,i)) = doc (showString ( i))


instance Print TokCase where
  prt _ (TokCase (_,i)) = doc (showString ( i))


instance Print TokProc where
  prt _ (TokProc (_,i)) = doc (showString ( i))


instance Print TokClose where
  prt _ (TokClose (_,i)) = doc (showString ( i))


instance Print TokHalt where
  prt _ (TokHalt (_,i)) = doc (showString ( i))


instance Print TokGet where
  prt _ (TokGet (_,i)) = doc (showString ( i))


instance Print TokPut where
  prt _ (TokPut (_,i)) = doc (showString ( i))


instance Print TokHCase where
  prt _ (TokHCase (_,i)) = doc (showString ( i))


instance Print TokHPut where
  prt _ (TokHPut (_,i)) = doc (showString ( i))


instance Print TokSplit where
  prt _ (TokSplit (_,i)) = doc (showString ( i))


instance Print TokFork where
  prt _ (TokFork (_,i)) = doc (showString ( i))


instance Print TokDCare where
  prt _ (TokDCare (_,i)) = doc (showString ( i))


instance Print TokString where
  prt _ (TokString (_,i)) = doc (showString ( i))


instance Print UIdent where
  prt _ (UIdent (_,i)) = doc (showString ( i))
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

instance Print PIdent where
  prt _ (PIdent (_,i)) = doc (showString ( i))
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

instance Print PInteger where
  prt _ (PInteger (_,i)) = doc (showString ( i))


instance Print Infix0op where
  prt _ (Infix0op i) = doc (showString ( i))


instance Print Infix1op where
  prt _ (Infix1op i) = doc (showString ( i))


instance Print Infix2op where
  prt _ (Infix2op i) = doc (showString ( i))


instance Print Infix3op where
  prt _ (Infix3op i) = doc (showString ( i))


instance Print Infix4op where
  prt _ (Infix4op i) = doc (showString ( i))


instance Print Infix5op where
  prt _ (Infix5op i) = doc (showString ( i))


instance Print Infix6op where
  prt _ (Infix6op i) = doc (showString ( i))


instance Print Infix7op where
  prt _ (Infix7op i) = doc (showString ( i))



instance Print MPL where
  prt i e = case e of
    MPLPROG mplstmts runstmt -> prPrec i 0 (concatD [prt 0 mplstmts, prt 0 runstmt])

instance Print MPLstmt where
  prt i e = case e of
    WHEREDEFN tokdefn defns mplstmtalts -> prPrec i 0 (concatD [prt 0 tokdefn, doc (showString "of"), doc (showString "{"), prt 0 defns, doc (showString "}"), doc (showString "where"), doc (showString "{"), prt 0 mplstmtalts, doc (showString "}")])
    WOWHEREDEFN tokdefn defns -> prPrec i 0 (concatD [prt 0 tokdefn, doc (showString "of"), doc (showString "{"), prt 0 defns, doc (showString "}")])
    BAREDEFN defn -> prPrec i 0 (concatD [prt 0 defn])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print MPLstmtAlt where
  prt i e = case e of
    MPLSTMTALT mplstmt -> prPrec i 0 (concatD [prt 0 mplstmt])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print RUNstmt where
  prt i e = case e of
    RUNSTMTWITHType tokrun protocols1 protocols2 channels1 channels2 process -> prPrec i 0 (concatD [prt 0 tokrun, doc (showString "::"), prt 0 protocols1, doc (showString "=>"), prt 0 protocols2, doc (showString "="), doc (showString "{"), prt 0 channels1, doc (showString "=>"), prt 0 channels2, prt 0 process, doc (showString "}")])
    RUNSTMTWITHTOUType tokrun channels1 channels2 process -> prPrec i 0 (concatD [prt 0 tokrun, prt 0 channels1, doc (showString "=>"), prt 0 channels2, prt 0 process])

instance Print Defn where
  prt i e = case e of
    TYPEDEF typedefn -> prPrec i 0 (concatD [prt 0 typedefn])
    PROTOCOLDEF ctypedefn -> prPrec i 0 (concatD [prt 0 ctypedefn])
    FUNCTIONDEF functiondefn -> prPrec i 0 (concatD [prt 0 functiondefn])
    PROCESSDEF processdef -> prPrec i 0 (concatD [prt 0 processdef])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print TypeDefn where
  prt i e = case e of
    DATA tokdata dataclauses -> prPrec i 0 (concatD [prt 0 tokdata, prt 0 dataclauses])
    CODATA tokcodata codataclauses -> prPrec i 0 (concatD [prt 0 tokcodata, prt 0 codataclauses])
    TYPE toktype typespecs type_ -> prPrec i 0 (concatD [prt 0 toktype, prt 0 typespecs, doc (showString "="), doc (showString "{"), prt 0 type_, doc (showString "}")])

instance Print DataClause where
  prt i e = case e of
    DATACLAUSE typespec uident dataphrases -> prPrec i 0 (concatD [prt 0 typespec, doc (showString "->"), prt 0 uident, doc (showString "="), doc (showString "{"), prt 0 dataphrases, doc (showString "}")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "and"), prt 0 xs])
instance Print CoDataClause where
  prt i e = case e of
    CODATACLAUSE uident typespec codataphrases -> prPrec i 0 (concatD [prt 0 uident, doc (showString "->"), prt 0 typespec, doc (showString "="), doc (showString "{"), prt 0 codataphrases, doc (showString "}")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "and"), prt 0 xs])
instance Print DataPhrase where
  prt i e = case e of
    DATAPHRASE structors types uident -> prPrec i 0 (concatD [prt 0 structors, doc (showString "::"), prt 0 types, doc (showString "->"), prt 0 uident])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print CoDataPhrase where
  prt i e = case e of
    CODATAPHRASE structors types type_ -> prPrec i 0 (concatD [prt 0 structors, doc (showString "::"), prt 0 types, doc (showString "->"), prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Structor where
  prt i e = case e of
    STRUCTOR uident -> prPrec i 0 (concatD [prt 0 uident])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print TypeSpec where
  prt i e = case e of
    TYPESPEC_param uident typeparams -> prPrec i 0 (concatD [prt 0 uident, doc (showString "("), prt 0 typeparams, doc (showString ")")])
    TYPESPEC_basic uident -> prPrec i 0 (concatD [prt 0 uident])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print TypeParam where
  prt i e = case e of
    TYPEPARAM uident -> prPrec i 0 (concatD [prt 0 uident])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Type where
  prt i e = case e of
    TYPEARROW typen type_ -> prPrec i 0 (concatD [prt 0 typen, doc (showString "=>"), prt 0 type_])
    TYPENext typen -> prPrec i 0 (concatD [prt 0 typen])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print TypeN where
  prt i e = case e of
    TYPEUNIT tokunit -> prPrec i 0 (concatD [prt 0 tokunit])
    TYPELIST toksbro typen toksbrc -> prPrec i 0 (concatD [prt 0 toksbro, prt 0 typen, prt 0 toksbrc])
    TYPEDATCODAT uident types -> prPrec i 0 (concatD [prt 0 uident, doc (showString "("), prt 0 types, doc (showString ")")])
    TYPECONST_VAR uident -> prPrec i 0 (concatD [prt 0 uident])
    TYPEPROD types -> prPrec i 0 (concatD [doc (showString "<"), prt 0 types, doc (showString ">")])
    TYPEBRACKET type_ -> prPrec i 0 (concatD [doc (showString "("), prt 0 type_, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print CTypeDefn where
  prt i e = case e of
    PROTOCOL tokprotocol protocolclause -> prPrec i 0 (concatD [prt 0 tokprotocol, prt 0 protocolclause])
    COPROTOCOL tokcoprotocol coprotocolclause -> prPrec i 0 (concatD [prt 0 tokcoprotocol, prt 0 coprotocolclause])

instance Print ProtocolClause where
  prt i e = case e of
    PROTOCOLCLAUSE typespec uident protocolphrases -> prPrec i 0 (concatD [prt 0 typespec, doc (showString "=>"), prt 0 uident, doc (showString "="), doc (showString "{"), prt 0 protocolphrases, doc (showString "}")])

instance Print CoProtocolClause where
  prt i e = case e of
    COPROTOCOLCLAUSE uident typespec coprotocolphrases -> prPrec i 0 (concatD [prt 0 uident, doc (showString "=>"), prt 0 typespec, doc (showString "="), doc (showString "{"), prt 0 coprotocolphrases, doc (showString "}")])

instance Print ProtocolPhrase where
  prt i e = case e of
    PROTOCOLPHRASE uident1 protocol uident2 -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "::"), prt 0 protocol, doc (showString "=>"), prt 0 uident2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print CoProtocolPhrase where
  prt i e = case e of
    COPROTOCOLPHRASE uident1 uident2 protocol -> prPrec i 0 (concatD [prt 0 uident1, doc (showString "::"), prt 0 uident2, doc (showString "=>"), prt 0 protocol])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Protocol where
  prt i e = case e of
    PROTOCOLtensor protocol1 protocol2 -> prPrec i 0 (concatD [prt 1 protocol1, doc (showString "(*)"), prt 0 protocol2])
    PROTOCOLpar protocol1 protocol2 -> prPrec i 0 (concatD [prt 1 protocol1, doc (showString "(+)"), prt 0 protocol2])
    PROTOCOLget tokgetprot type_ protocol -> prPrec i 1 (concatD [prt 0 tokgetprot, doc (showString "("), prt 0 type_, doc (showString "|"), prt 0 protocol, doc (showString ")")])
    PROTOCOLput tokputprot type_ protocol -> prPrec i 1 (concatD [prt 0 tokputprot, doc (showString "("), prt 0 type_, doc (showString "|"), prt 0 protocol, doc (showString ")")])
    PROTOCOLneg protocol -> prPrec i 1 (concatD [doc (showString "Neg"), doc (showString "("), prt 0 protocol, doc (showString ")")])
    PROTOCOLtopbot toktopbot -> prPrec i 1 (concatD [prt 0 toktopbot])
    PROTNamedWArgs uident types -> prPrec i 1 (concatD [prt 0 uident, doc (showString "("), prt 0 types, doc (showString ")")])
    PROTNamedWOArgs uident -> prPrec i 1 (concatD [prt 0 uident])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print FunctionDefn where
  prt i e = case e of
    FUNCTIONDEFNfull tokfun pident types type_ patttermpharses -> prPrec i 0 (concatD [prt 0 tokfun, prt 0 pident, doc (showString "::"), prt 0 types, doc (showString "->"), prt 0 type_, doc (showString "="), doc (showString "{"), prt 0 patttermpharses, doc (showString "}")])
    FUNCTIONDEFNshort tokfun pident patttermpharses -> prPrec i 0 (concatD [prt 0 tokfun, prt 0 pident, doc (showString "="), doc (showString "{"), prt 0 patttermpharses, doc (showString "}")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print FoldPattern where
  prt i e = case e of
    FOLDPATT_WOBRAC uident pidents term -> prPrec i 0 (concatD [prt 0 uident, doc (showString ":"), prt 0 pidents, doc (showString "="), doc (showString "{"), prt 0 term, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print PattTermPharse where
  prt i e = case e of
    PATTERNshort patterns term -> prPrec i 0 (concatD [prt 0 patterns, doc (showString "->"), prt 0 term])
    PATTERNguard patterns guardedterms -> prPrec i 0 (concatD [prt 0 patterns, doc (showString "->"), doc (showString "switch"), doc (showString "{"), prt 0 guardedterms, doc (showString "}")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print GuardedTerm where
  prt i e = case e of
    GUARDterm term1 term2 -> prPrec i 0 (concatD [prt 0 term1, doc (showString "="), doc (showString "{"), prt 0 term2, doc (showString "}")])
    GUARDother tokdefault term -> prPrec i 0 (concatD [prt 0 tokdefault, doc (showString "="), doc (showString "{"), prt 0 term, doc (showString "}")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Pattern where
  prt i e = case e of
    LISTPATTERN2 pattern1 pattern2 -> prPrec i 0 (concatD [prt 1 pattern1, doc (showString ":"), prt 0 pattern2])
    CONSPATTERN uident patterns -> prPrec i 1 (concatD [prt 0 uident, doc (showString "("), prt 0 patterns, doc (showString ")")])
    CONSPATTERN_WA uident -> prPrec i 1 (concatD [prt 0 uident])
    LISTPATTERN1 toksbro patterns toksbrc -> prPrec i 1 (concatD [prt 0 toksbro, prt 0 patterns, prt 0 toksbrc])
    PRODPATTERN patterns -> prPrec i 1 (concatD [doc (showString "<"), prt 0 patterns, doc (showString ">")])
    VARPATTERN pident -> prPrec i 1 (concatD [prt 0 pident])
    STR_CONSTPATTERN tokstring -> prPrec i 1 (concatD [prt 0 tokstring])
    INT_CONSTPATTERN pinteger -> prPrec i 1 (concatD [prt 0 pinteger])
    NULLPATTERN tokdcare -> prPrec i 1 (concatD [prt 0 tokdcare])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Term where
  prt i e = case e of
    LISTTERM2 term1 term2 -> prPrec i 0 (concatD [prt 1 term1, doc (showString ":"), prt 0 term2])
    Infix0TERM term1 infixop term2 -> prPrec i 1 (concatD [prt 1 term1, prt 0 infixop, prt 2 term2])
    Infix1TERM term1 infixop term2 -> prPrec i 2 (concatD [prt 2 term1, prt 0 infixop, prt 3 term2])
    Infix2TERM term1 infixop term2 -> prPrec i 3 (concatD [prt 3 term1, prt 0 infixop, prt 4 term2])
    Infix3TERM term1 infixop term2 -> prPrec i 4 (concatD [prt 4 term1, prt 0 infixop, prt 5 term2])
    Infix4TERM term1 infixop term2 -> prPrec i 5 (concatD [prt 5 term1, prt 0 infixop, prt 6 term2])
    Infix5TERM term1 infixop term2 -> prPrec i 6 (concatD [prt 6 term1, prt 0 infixop, prt 7 term2])
    Infix6TERM term1 infixop term2 -> prPrec i 7 (concatD [prt 8 term1, prt 0 infixop, prt 7 term2])
    Infix7TERM term1 infixop term2 -> prPrec i 8 (concatD [prt 8 term1, prt 0 infixop, prt 9 term2])
    LISTTERM toksbro terms toksbrc -> prPrec i 9 (concatD [prt 0 toksbro, prt 0 terms, prt 0 toksbrc])
    LETTERM toklet term letwheres -> prPrec i 9 (concatD [prt 0 toklet, prt 0 term, doc (showString "where"), doc (showString "{"), prt 0 letwheres, doc (showString "}")])
    VARTERM pident -> prPrec i 9 (concatD [prt 0 pident])
    CONSTTERM constanttype -> prPrec i 9 (concatD [prt 0 constanttype])
    IFTERM tokif term1 term2 term3 -> prPrec i 9 (concatD [prt 0 tokif, prt 0 term1, doc (showString "then"), prt 0 term2, doc (showString "else"), doc (showString "{"), prt 0 term3, doc (showString "}")])
    UNFOLDTERM tokunfold pident foldpatterns -> prPrec i 9 (concatD [prt 0 tokunfold, prt 0 pident, doc (showString "with"), doc (showString "{"), prt 0 foldpatterns, doc (showString "}")])
    FOLDTERM tokfold pident foldpatterns -> prPrec i 9 (concatD [prt 0 tokfold, prt 0 pident, doc (showString "of"), doc (showString "{"), prt 0 foldpatterns, doc (showString "}")])
    CASETERM tokcase term patttermpharses -> prPrec i 9 (concatD [prt 0 tokcase, prt 0 term, doc (showString "of"), doc (showString "{"), prt 0 patttermpharses, doc (showString "}")])
    GENCONSTERM_WARGS uident terms -> prPrec i 9 (concatD [prt 0 uident, doc (showString "("), prt 0 terms, doc (showString ")")])
    GENCONSTERM_WOARGS uident -> prPrec i 9 (concatD [prt 0 uident])
    PRODTERM terms -> prPrec i 9 (concatD [doc (showString "<"), prt 0 terms, doc (showString ">")])
    FUNAPPTERM pident terms -> prPrec i 9 (concatD [prt 0 pident, doc (showString "("), prt 0 terms, doc (showString ")")])
    RECORDTERM tokrecord recordentrys -> prPrec i 9 (concatD [prt 0 tokrecord, doc (showString "of"), doc (showString "{"), prt 0 recordentrys, doc (showString "}")])
    RECORDTERMALT recordentryalts -> prPrec i 9 (concatD [doc (showString "(:"), prt 0 recordentryalts, doc (showString ":)")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print LetWhere where
  prt i e = case e of
    DEFN_LetWhere defn -> prPrec i 0 (concatD [prt 0 defn])
    PATTTERM_LetWhere pattterm -> prPrec i 0 (concatD [prt 0 pattterm])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print PattTerm where
  prt i e = case e of
    JUSTPATTTERM pident term -> prPrec i 0 (concatD [prt 0 pident, doc (showString "="), doc (showString "{"), prt 0 term, doc (showString "}")])

instance Print ConstantType where
  prt i e = case e of
    INTEGER pinteger -> prPrec i 0 (concatD [prt 0 pinteger])
    STRING tokstring -> prPrec i 0 (concatD [prt 0 tokstring])
    DOUBLE d -> prPrec i 0 (concatD [prt 0 d])

instance Print RecordEntryAlt where
  prt i e = case e of
    RECORDENTRY_ALT recordentry -> prPrec i 0 (concatD [prt 0 recordentry])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print RecordEntry where
  prt i e = case e of
    RECORDENTRY pattern term -> prPrec i 0 (concatD [prt 0 pattern, doc (showString ":="), prt 0 term])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print ProcessDef where
  prt i e = case e of
    PROCESSDEFfull tokproc pident types protocols1 protocols2 patprocessphr -> prPrec i 0 (concatD [prt 0 tokproc, prt 0 pident, doc (showString "::"), prt 0 types, doc (showString "|"), prt 0 protocols1, doc (showString "=>"), prt 0 protocols2, doc (showString "="), doc (showString "{"), prt 0 patprocessphr, doc (showString "}")])
    PROCESSDEFshort tokproc pident patprocessphr -> prPrec i 0 (concatD [prt 0 tokproc, prt 0 pident, doc (showString "="), doc (showString "{"), prt 0 patprocessphr, doc (showString "}")])

instance Print PatProcessPhr where
  prt i e = case e of
    PROCESSPHRASEnoguard patterns channels1 channels2 process -> prPrec i 0 (concatD [prt 0 patterns, doc (showString "|"), prt 0 channels1, doc (showString "=>"), prt 0 channels2, prt 0 process])

instance Print Process where
  prt i e = case e of
    MANY_PROCESS processcommands -> prPrec i 0 (concatD [doc (showString "->"), doc (showString "do"), doc (showString "{"), prt 0 processcommands, doc (showString "}")])
    ONE_PROCESS processcommand -> prPrec i 0 (concatD [doc (showString "->"), prt 0 processcommand])

instance Print ProcessCommand where
  prt i e = case e of
    PROCESS_RUN pident terms channels1 channels2 -> prPrec i 0 (concatD [prt 0 pident, doc (showString "("), prt 0 terms, doc (showString "|"), prt 0 channels1, doc (showString "=>"), prt 0 channels2, doc (showString ")")])
    PROCESS_CLOSE tokclose channel -> prPrec i 0 (concatD [prt 0 tokclose, prt 0 channel])
    PROCESS_HALT tokhalt channel -> prPrec i 0 (concatD [prt 0 tokhalt, prt 0 channel])
    PROCESS_GET tokget pident channel -> prPrec i 0 (concatD [prt 0 tokget, prt 0 pident, doc (showString "on"), prt 0 channel])
    PROCESS_HCASE tokhcase channel handlers -> prPrec i 0 (concatD [prt 0 tokhcase, prt 0 channel, doc (showString "of"), doc (showString "{"), prt 0 handlers, doc (showString "}")])
    PROCESS_PUT tokput term channel -> prPrec i 0 (concatD [prt 0 tokput, prt 0 term, doc (showString "on"), prt 0 channel])
    PROCESS_HPUT tokhput uident channel -> prPrec i 0 (concatD [prt 0 tokhput, prt 0 uident, doc (showString "on"), prt 0 channel])
    PROCESS_SPLIT toksplit channel channels -> prPrec i 0 (concatD [prt 0 toksplit, prt 0 channel, doc (showString "into"), prt 0 channels])
    PROCESS_FORK tokfork pident forkparts -> prPrec i 0 (concatD [prt 0 tokfork, prt 0 pident, doc (showString "as"), doc (showString "{"), prt 0 forkparts, doc (showString "}")])
    Process_PLUG plugparts -> prPrec i 0 (concatD [doc (showString "plug"), doc (showString "{"), prt 0 plugparts, doc (showString "}")])
    Procss_ID channel pchannel -> prPrec i 0 (concatD [prt 0 channel, doc (showString "|=|"), prt 0 pchannel])
    PROCESS_NEG channel1 channel2 -> prPrec i 0 (concatD [prt 0 channel1, doc (showString "="), doc (showString "{"), doc (showString "neg"), prt 0 channel2, doc (showString "}")])
    PROCESScase tokcase term processphrases -> prPrec i 0 (concatD [prt 0 tokcase, prt 0 term, doc (showString "of"), doc (showString "{"), prt 0 processphrases, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print PlugPart where
  prt i e = case e of
    PLUGPART_MANY processcommands -> prPrec i 0 (concatD [doc (showString "do"), doc (showString "{"), prt 0 processcommands, doc (showString "}")])
    PLUGPART_ONE processcommand -> prPrec i 0 (concatD [prt 0 processcommand])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print ForkPart where
  prt i e = case e of
    FORKPARTshort pident process -> prPrec i 0 (concatD [prt 0 pident, prt 0 process])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Handler where
  prt i e = case e of
    HANDLER uident process -> prPrec i 0 (concatD [prt 0 uident, prt 0 process])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print ProcessPhrase where
  prt i e = case e of
    CASEPROCESSnoguard pattern process -> prPrec i 0 (concatD [prt 0 pattern, prt 0 process])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print GuardProcessPhrase where
  prt i e = case e of
    GUARDEDPROCESSterm term processcommands -> prPrec i 0 (concatD [prt 0 term, doc (showString "="), doc (showString "{"), prt 0 processcommands, doc (showString "}")])
    GUARDEDPROCESSother tokdefault processcommands -> prPrec i 0 (concatD [prt 0 tokdefault, doc (showString "="), doc (showString "{"), prt 0 processcommands, doc (showString "}")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print PChannel where
  prt i e = case e of
    BARECHANNEL pident -> prPrec i 0 (concatD [prt 0 pident])
    NEGCHANNEL pident -> prPrec i 0 (concatD [doc (showString "neg"), prt 0 pident])

instance Print Channel where
  prt i e = case e of
    CHANNEL pident -> prPrec i 0 (concatD [prt 0 pident])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

