-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module LexMPL where



import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$l = [a-zA-Z\192 - \255] # [\215 \247]    -- isolatin1 letter FIXME
$c = [A-Z\192-\221] # [\215]    -- capital isolatin1 letter FIXME
$s = [a-z\222-\255] # [\247]    -- small isolatin1 letter FIXME
$d = [0-9]                -- digit
$i = [$l $d _ ']          -- identifier character
$u = [\0-\255]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \{ | \} | \; | \: \: | \= \> | \= | \, | \- \> | \( | \) | \< | \> | \( \* \) | \( \+ \) | \| | \: | \( \: | \: \) | \: \= | \| \= \|

:-
"--" [.]* ; -- Toss single line comments
"{-" ([$u # \-] | \-+ [$u # [\- \}]])* ("-")+ "}" ;

$white+ ;
@rsyms { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
\( \) { tok (\p s -> PT p (eitherResIdent (T_TokUnit . share) s)) }
\[ { tok (\p s -> PT p (eitherResIdent (T_TokSBrO . share) s)) }
\] { tok (\p s -> PT p (eitherResIdent (T_TokSBrC . share) s)) }
d e f n { tok (\p s -> PT p (eitherResIdent (T_TokDefn . share) s)) }
r u n { tok (\p s -> PT p (eitherResIdent (T_TokRun . share) s)) }
t e r m { tok (\p s -> PT p (eitherResIdent (T_TokTerm . share) s)) }
d a t a { tok (\p s -> PT p (eitherResIdent (T_TokData . share) s)) }
c o d a t a { tok (\p s -> PT p (eitherResIdent (T_TokCodata . share) s)) }
t y p e { tok (\p s -> PT p (eitherResIdent (T_TokType . share) s)) }
p r o t o c o l { tok (\p s -> PT p (eitherResIdent (T_TokProtocol . share) s)) }
c o p r o t o c o l { tok (\p s -> PT p (eitherResIdent (T_TokCoprotocol . share) s)) }
G e t { tok (\p s -> PT p (eitherResIdent (T_TokGetProt . share) s)) }
P u t { tok (\p s -> PT p (eitherResIdent (T_TokPutProt . share) s)) }
n e g { tok (\p s -> PT p (eitherResIdent (T_TokNeg . share) s)) }
T o p B o t { tok (\p s -> PT p (eitherResIdent (T_TokTopBot . share) s)) }
f u n { tok (\p s -> PT p (eitherResIdent (T_TokFun . share) s)) }
d e f a u l t { tok (\p s -> PT p (eitherResIdent (T_TokDefault . share) s)) }
r e c o r d { tok (\p s -> PT p (eitherResIdent (T_TokRecord . share) s)) }
i f { tok (\p s -> PT p (eitherResIdent (T_TokIf . share) s)) }
l e t { tok (\p s -> PT p (eitherResIdent (T_TokLet . share) s)) }
f o l d { tok (\p s -> PT p (eitherResIdent (T_TokFold . share) s)) }
u n f o l d { tok (\p s -> PT p (eitherResIdent (T_TokUnfold . share) s)) }
c a s e { tok (\p s -> PT p (eitherResIdent (T_TokCase . share) s)) }
p r o c { tok (\p s -> PT p (eitherResIdent (T_TokProc . share) s)) }
c l o s e { tok (\p s -> PT p (eitherResIdent (T_TokClose . share) s)) }
h a l t { tok (\p s -> PT p (eitherResIdent (T_TokHalt . share) s)) }
g e t { tok (\p s -> PT p (eitherResIdent (T_TokGet . share) s)) }
p u t { tok (\p s -> PT p (eitherResIdent (T_TokPut . share) s)) }
h c a s e { tok (\p s -> PT p (eitherResIdent (T_TokHCase . share) s)) }
h p u t { tok (\p s -> PT p (eitherResIdent (T_TokHPut . share) s)) }
s p l i t { tok (\p s -> PT p (eitherResIdent (T_TokSplit . share) s)) }
f o r k { tok (\p s -> PT p (eitherResIdent (T_TokFork . share) s)) }
\_ { tok (\p s -> PT p (eitherResIdent (T_TokDCare . share) s)) }
\" $l ($l | $d | \_ | \')* \" { tok (\p s -> PT p (eitherResIdent (T_TokString . share) s)) }
$c ($l | $d | \_)* { tok (\p s -> PT p (eitherResIdent (T_UIdent . share) s)) }
$l ($l | $d | \_ | \')* { tok (\p s -> PT p (eitherResIdent (T_PIdent . share) s)) }
$d + { tok (\p s -> PT p (eitherResIdent (T_PInteger . share) s)) }
\| \| { tok (\p s -> PT p (eitherResIdent (T_Infix0op . share) s)) }
\& \& { tok (\p s -> PT p (eitherResIdent (T_Infix1op . share) s)) }
\= \= | \/ \= | \< | \> | \< \= | \> \= { tok (\p s -> PT p (eitherResIdent (T_Infix2op . share) s)) }
\+ \+ { tok (\p s -> PT p (eitherResIdent (T_Infix3op . share) s)) }
\+ | \- { tok (\p s -> PT p (eitherResIdent (T_Infix4op . share) s)) }
\* | \/ | \% { tok (\p s -> PT p (eitherResIdent (T_Infix5op . share) s)) }
\^ { tok (\p s -> PT p (eitherResIdent (T_Infix6op . share) s)) }
\! \! { tok (\p s -> PT p (eitherResIdent (T_Infix7op . share) s)) }

$l $i*   { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }



$d+ \. $d+ (e (\-)? $d+)? { tok (\p s -> PT p (TD $ share s)) }

{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals
 | T_TokUnit !String
 | T_TokSBrO !String
 | T_TokSBrC !String
 | T_TokDefn !String
 | T_TokRun !String
 | T_TokTerm !String
 | T_TokData !String
 | T_TokCodata !String
 | T_TokType !String
 | T_TokProtocol !String
 | T_TokCoprotocol !String
 | T_TokGetProt !String
 | T_TokPutProt !String
 | T_TokNeg !String
 | T_TokTopBot !String
 | T_TokFun !String
 | T_TokDefault !String
 | T_TokRecord !String
 | T_TokIf !String
 | T_TokLet !String
 | T_TokFold !String
 | T_TokUnfold !String
 | T_TokCase !String
 | T_TokProc !String
 | T_TokClose !String
 | T_TokHalt !String
 | T_TokGet !String
 | T_TokPut !String
 | T_TokHCase !String
 | T_TokHPut !String
 | T_TokSplit !String
 | T_TokFork !String
 | T_TokDCare !String
 | T_TokString !String
 | T_UIdent !String
 | T_PIdent !String
 | T_PInteger !String
 | T_Infix0op !String
 | T_Infix1op !String
 | T_Infix2op !String
 | T_Infix3op !String
 | T_Infix4op !String
 | T_Infix5op !String
 | T_Infix6op !String
 | T_Infix7op !String

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

tokenPos :: [Token] -> String
tokenPos (PT (Pn _ l _) _ :_) = "line " ++ show l
tokenPos (Err (Pn _ l _) :_) = "line " ++ show l
tokenPos _ = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  PT _ (T_TokUnit s) -> s
  PT _ (T_TokSBrO s) -> s
  PT _ (T_TokSBrC s) -> s
  PT _ (T_TokDefn s) -> s
  PT _ (T_TokRun s) -> s
  PT _ (T_TokTerm s) -> s
  PT _ (T_TokData s) -> s
  PT _ (T_TokCodata s) -> s
  PT _ (T_TokType s) -> s
  PT _ (T_TokProtocol s) -> s
  PT _ (T_TokCoprotocol s) -> s
  PT _ (T_TokGetProt s) -> s
  PT _ (T_TokPutProt s) -> s
  PT _ (T_TokNeg s) -> s
  PT _ (T_TokTopBot s) -> s
  PT _ (T_TokFun s) -> s
  PT _ (T_TokDefault s) -> s
  PT _ (T_TokRecord s) -> s
  PT _ (T_TokIf s) -> s
  PT _ (T_TokLet s) -> s
  PT _ (T_TokFold s) -> s
  PT _ (T_TokUnfold s) -> s
  PT _ (T_TokCase s) -> s
  PT _ (T_TokProc s) -> s
  PT _ (T_TokClose s) -> s
  PT _ (T_TokHalt s) -> s
  PT _ (T_TokGet s) -> s
  PT _ (T_TokPut s) -> s
  PT _ (T_TokHCase s) -> s
  PT _ (T_TokHPut s) -> s
  PT _ (T_TokSplit s) -> s
  PT _ (T_TokFork s) -> s
  PT _ (T_TokDCare s) -> s
  PT _ (T_TokString s) -> s
  PT _ (T_UIdent s) -> s
  PT _ (T_PIdent s) -> s
  PT _ (T_PInteger s) -> s
  PT _ (T_Infix0op s) -> s
  PT _ (T_Infix1op s) -> s
  PT _ (T_Infix2op s) -> s
  PT _ (T_Infix3op s) -> s
  PT _ (T_Infix4op s) -> s
  PT _ (T_Infix5op s) -> s
  PT _ (T_Infix6op s) -> s
  PT _ (T_Infix7op s) -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b "and" 18 (b ":)" 9 (b ")" 5 (b "(+)" 3 (b "(*)" 2 (b "(" 1 N N) N) (b "(:" 4 N N)) (b "->" 7 (b "," 6 N N) (b ":" 8 N N))) (b "=" 14 (b ";" 12 (b ":=" 11 (b "::" 10 N N) N) (b "<" 13 N N)) (b ">" 16 (b "=>" 15 N N) (b "Neg" 17 N N)))) (b "switch" 27 (b "neg" 23 (b "else" 21 (b "do" 20 (b "as" 19 N N) N) (b "into" 22 N N)) (b "on" 25 (b "of" 24 N N) (b "plug" 26 N N))) (b "{" 31 (b "where" 29 (b "then" 28 N N) (b "with" 30 N N)) (b "|=|" 33 (b "|" 32 N N) (b "}" 34 N N))))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
